// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MetricAlarmInitParameters struct {
	ActionsEnabled *bool `json:"actionsEnabled,omitempty" tf:"actions_enabled,omitempty"`

	// +listType=set
	AlarmActions []*string `json:"alarmActions,omitempty" tf:"alarm_actions,omitempty"`

	AlarmDescription *string `json:"alarmDescription,omitempty" tf:"alarm_description,omitempty"`

	AlarmName *string `json:"alarmName,omitempty" tf:"alarm_name,omitempty"`

	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	DatapointsToAlarm *float64 `json:"datapointsToAlarm,omitempty" tf:"datapoints_to_alarm,omitempty"`

	// +mapType=granular
	Dimensions map[string]*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	EvaluateLowSampleCountPercentiles *string `json:"evaluateLowSampleCountPercentiles,omitempty" tf:"evaluate_low_sample_count_percentiles,omitempty"`

	EvaluationPeriods *float64 `json:"evaluationPeriods,omitempty" tf:"evaluation_periods,omitempty"`

	ExtendedStatistic *string `json:"extendedStatistic,omitempty" tf:"extended_statistic,omitempty"`

	// +listType=set
	InsufficientDataActions []*string `json:"insufficientDataActions,omitempty" tf:"insufficient_data_actions,omitempty"`

	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	MetricQuery []MetricQueryInitParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +listType=set
	OkActions []*string `json:"okActions,omitempty" tf:"ok_actions,omitempty"`

	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`

	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	ThresholdMetricID *string `json:"thresholdMetricId,omitempty" tf:"threshold_metric_id,omitempty"`

	TreatMissingData *string `json:"treatMissingData,omitempty" tf:"treat_missing_data,omitempty"`

	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricAlarmObservation struct {
	ActionsEnabled *bool `json:"actionsEnabled,omitempty" tf:"actions_enabled,omitempty"`

	// +listType=set
	AlarmActions []*string `json:"alarmActions,omitempty" tf:"alarm_actions,omitempty"`

	AlarmDescription *string `json:"alarmDescription,omitempty" tf:"alarm_description,omitempty"`

	AlarmName *string `json:"alarmName,omitempty" tf:"alarm_name,omitempty"`

	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	DatapointsToAlarm *float64 `json:"datapointsToAlarm,omitempty" tf:"datapoints_to_alarm,omitempty"`

	// +mapType=granular
	Dimensions map[string]*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	EvaluateLowSampleCountPercentiles *string `json:"evaluateLowSampleCountPercentiles,omitempty" tf:"evaluate_low_sample_count_percentiles,omitempty"`

	EvaluationPeriods *float64 `json:"evaluationPeriods,omitempty" tf:"evaluation_periods,omitempty"`

	ExtendedStatistic *string `json:"extendedStatistic,omitempty" tf:"extended_statistic,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +listType=set
	InsufficientDataActions []*string `json:"insufficientDataActions,omitempty" tf:"insufficient_data_actions,omitempty"`

	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	MetricQuery []MetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +listType=set
	OkActions []*string `json:"okActions,omitempty" tf:"ok_actions,omitempty"`

	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`

	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	ThresholdMetricID *string `json:"thresholdMetricId,omitempty" tf:"threshold_metric_id,omitempty"`

	TreatMissingData *string `json:"treatMissingData,omitempty" tf:"treat_missing_data,omitempty"`

	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricAlarmParameters struct {

	// +kubebuilder:validation:Optional
	ActionsEnabled *bool `json:"actionsEnabled,omitempty" tf:"actions_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	AlarmActions []*string `json:"alarmActions,omitempty" tf:"alarm_actions,omitempty"`

	// +kubebuilder:validation:Optional
	AlarmDescription *string `json:"alarmDescription,omitempty" tf:"alarm_description,omitempty"`

	// +kubebuilder:validation:Optional
	AlarmName *string `json:"alarmName,omitempty" tf:"alarm_name,omitempty"`

	// +kubebuilder:validation:Optional
	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	// +kubebuilder:validation:Optional
	DatapointsToAlarm *float64 `json:"datapointsToAlarm,omitempty" tf:"datapoints_to_alarm,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Dimensions map[string]*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// +kubebuilder:validation:Optional
	EvaluateLowSampleCountPercentiles *string `json:"evaluateLowSampleCountPercentiles,omitempty" tf:"evaluate_low_sample_count_percentiles,omitempty"`

	// +kubebuilder:validation:Optional
	EvaluationPeriods *float64 `json:"evaluationPeriods,omitempty" tf:"evaluation_periods,omitempty"`

	// +kubebuilder:validation:Optional
	ExtendedStatistic *string `json:"extendedStatistic,omitempty" tf:"extended_statistic,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	InsufficientDataActions []*string `json:"insufficientDataActions,omitempty" tf:"insufficient_data_actions,omitempty"`

	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Optional
	MetricQuery []MetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	OkActions []*string `json:"okActions,omitempty" tf:"ok_actions,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`

	// +kubebuilder:validation:Optional
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Optional
	ThresholdMetricID *string `json:"thresholdMetricId,omitempty" tf:"threshold_metric_id,omitempty"`

	// +kubebuilder:validation:Optional
	TreatMissingData *string `json:"treatMissingData,omitempty" tf:"treat_missing_data,omitempty"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricInitParameters struct {

	// +mapType=granular
	Dimensions map[string]*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`

	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricObservation struct {

	// +mapType=granular
	Dimensions map[string]*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`

	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricParameters struct {

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Dimensions map[string]*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	Stat *string `json:"stat" tf:"stat,omitempty"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricQueryInitParameters struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	Metric []MetricInitParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type MetricQueryObservation struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	Metric []MetricObservation `json:"metric,omitempty" tf:"metric,omitempty"`

	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type MetricQueryParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// +kubebuilder:validation:Optional
	Metric []MetricParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// +kubebuilder:validation:Optional
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

// MetricAlarmSpec defines the desired state of MetricAlarm
type MetricAlarmSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MetricAlarmParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MetricAlarmInitParameters `json:"initProvider,omitempty"`
}

// MetricAlarmStatus defines the observed state of MetricAlarm.
type MetricAlarmStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MetricAlarmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MetricAlarm is the Schema for the MetricAlarms API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type MetricAlarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.alarmName) || (has(self.initProvider) && has(self.initProvider.alarmName))",message="spec.forProvider.alarmName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.comparisonOperator) || (has(self.initProvider) && has(self.initProvider.comparisonOperator))",message="spec.forProvider.comparisonOperator is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dimensions) || (has(self.initProvider) && has(self.initProvider.dimensions))",message="spec.forProvider.dimensions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.evaluationPeriods) || (has(self.initProvider) && has(self.initProvider.evaluationPeriods))",message="spec.forProvider.evaluationPeriods is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricName) || (has(self.initProvider) && has(self.initProvider.metricName))",message="spec.forProvider.metricName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.__namespace__) || (has(self.initProvider) && has(self.initProvider.__namespace__))",message="spec.forProvider.namespace is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.period) || (has(self.initProvider) && has(self.initProvider.period))",message="spec.forProvider.period is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.statistic) || (has(self.initProvider) && has(self.initProvider.statistic))",message="spec.forProvider.statistic is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.threshold) || (has(self.initProvider) && has(self.initProvider.threshold))",message="spec.forProvider.threshold is a required parameter"
	Spec   MetricAlarmSpec   `json:"spec"`
	Status MetricAlarmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MetricAlarmList contains a list of MetricAlarms
type MetricAlarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MetricAlarm `json:"items"`
}

// Repository type metadata.
var (
	MetricAlarm_Kind             = "MetricAlarm"
	MetricAlarm_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MetricAlarm_Kind}.String()
	MetricAlarm_KindAPIVersion   = MetricAlarm_Kind + "." + CRDGroupVersion.String()
	MetricAlarm_GroupVersionKind = CRDGroupVersion.WithKind(MetricAlarm_Kind)
)

func init() {
	SchemeBuilder.Register(&MetricAlarm{}, &MetricAlarmList{})
}
