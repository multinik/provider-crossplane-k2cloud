// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketServerSideEncryptionConfigurationInitParameters struct {
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	ExpectedBucketOwner *string `json:"expectedBucketOwner,omitempty" tf:"expected_bucket_owner,omitempty"`

	Rule []BucketServerSideEncryptionConfigurationRuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type BucketServerSideEncryptionConfigurationObservation struct {
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	ExpectedBucketOwner *string `json:"expectedBucketOwner,omitempty" tf:"expected_bucket_owner,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Rule []BucketServerSideEncryptionConfigurationRuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type BucketServerSideEncryptionConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	ExpectedBucketOwner *string `json:"expectedBucketOwner,omitempty" tf:"expected_bucket_owner,omitempty"`

	// +kubebuilder:validation:Optional
	Rule []BucketServerSideEncryptionConfigurationRuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type BucketServerSideEncryptionConfigurationRuleInitParameters struct {
	ApplyServerSideEncryptionByDefault []RuleApplyServerSideEncryptionByDefaultInitParameters `json:"applyServerSideEncryptionByDefault,omitempty" tf:"apply_server_side_encryption_by_default,omitempty"`

	BucketKeyEnabled *bool `json:"bucketKeyEnabled,omitempty" tf:"bucket_key_enabled,omitempty"`
}

type BucketServerSideEncryptionConfigurationRuleObservation struct {
	ApplyServerSideEncryptionByDefault []RuleApplyServerSideEncryptionByDefaultObservation `json:"applyServerSideEncryptionByDefault,omitempty" tf:"apply_server_side_encryption_by_default,omitempty"`

	BucketKeyEnabled *bool `json:"bucketKeyEnabled,omitempty" tf:"bucket_key_enabled,omitempty"`
}

type BucketServerSideEncryptionConfigurationRuleParameters struct {

	// +kubebuilder:validation:Optional
	ApplyServerSideEncryptionByDefault []RuleApplyServerSideEncryptionByDefaultParameters `json:"applyServerSideEncryptionByDefault,omitempty" tf:"apply_server_side_encryption_by_default,omitempty"`

	// +kubebuilder:validation:Optional
	BucketKeyEnabled *bool `json:"bucketKeyEnabled,omitempty" tf:"bucket_key_enabled,omitempty"`
}

type RuleApplyServerSideEncryptionByDefaultInitParameters struct {
	KMSMasterKeyID *string `json:"kmsMasterKeyId,omitempty" tf:"kms_master_key_id,omitempty"`

	SseAlgorithm *string `json:"sseAlgorithm,omitempty" tf:"sse_algorithm,omitempty"`
}

type RuleApplyServerSideEncryptionByDefaultObservation struct {
	KMSMasterKeyID *string `json:"kmsMasterKeyId,omitempty" tf:"kms_master_key_id,omitempty"`

	SseAlgorithm *string `json:"sseAlgorithm,omitempty" tf:"sse_algorithm,omitempty"`
}

type RuleApplyServerSideEncryptionByDefaultParameters struct {

	// +kubebuilder:validation:Optional
	KMSMasterKeyID *string `json:"kmsMasterKeyId,omitempty" tf:"kms_master_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	SseAlgorithm *string `json:"sseAlgorithm" tf:"sse_algorithm,omitempty"`
}

// BucketServerSideEncryptionConfigurationSpec defines the desired state of BucketServerSideEncryptionConfiguration
type BucketServerSideEncryptionConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketServerSideEncryptionConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketServerSideEncryptionConfigurationInitParameters `json:"initProvider,omitempty"`
}

// BucketServerSideEncryptionConfigurationStatus defines the observed state of BucketServerSideEncryptionConfiguration.
type BucketServerSideEncryptionConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketServerSideEncryptionConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketServerSideEncryptionConfiguration is the Schema for the BucketServerSideEncryptionConfigurations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type BucketServerSideEncryptionConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bucket) || (has(self.initProvider) && has(self.initProvider.bucket))",message="spec.forProvider.bucket is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rule) || (has(self.initProvider) && has(self.initProvider.rule))",message="spec.forProvider.rule is a required parameter"
	Spec   BucketServerSideEncryptionConfigurationSpec   `json:"spec"`
	Status BucketServerSideEncryptionConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketServerSideEncryptionConfigurationList contains a list of BucketServerSideEncryptionConfigurations
type BucketServerSideEncryptionConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketServerSideEncryptionConfiguration `json:"items"`
}

// Repository type metadata.
var (
	BucketServerSideEncryptionConfiguration_Kind             = "BucketServerSideEncryptionConfiguration"
	BucketServerSideEncryptionConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketServerSideEncryptionConfiguration_Kind}.String()
	BucketServerSideEncryptionConfiguration_KindAPIVersion   = BucketServerSideEncryptionConfiguration_Kind + "." + CRDGroupVersion.String()
	BucketServerSideEncryptionConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(BucketServerSideEncryptionConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketServerSideEncryptionConfiguration{}, &BucketServerSideEncryptionConfigurationList{})
}
