// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionInitParameters struct {
	StringEquals []StringEqualsInitParameters `json:"stringEquals,omitempty" tf:"string_equals,omitempty"`

	StringLike []StringLikeInitParameters `json:"stringLike,omitempty" tf:"string_like,omitempty"`

	StringNotEquals []StringNotEqualsInitParameters `json:"stringNotEquals,omitempty" tf:"string_not_equals,omitempty"`

	StringNotLike []StringNotLikeInitParameters `json:"stringNotLike,omitempty" tf:"string_not_like,omitempty"`
}

type ConditionObservation struct {
	StringEquals []StringEqualsObservation `json:"stringEquals,omitempty" tf:"string_equals,omitempty"`

	StringLike []StringLikeObservation `json:"stringLike,omitempty" tf:"string_like,omitempty"`

	StringNotEquals []StringNotEqualsObservation `json:"stringNotEquals,omitempty" tf:"string_not_equals,omitempty"`

	StringNotLike []StringNotLikeObservation `json:"stringNotLike,omitempty" tf:"string_not_like,omitempty"`
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	StringEquals []StringEqualsParameters `json:"stringEquals,omitempty" tf:"string_equals,omitempty"`

	// +kubebuilder:validation:Optional
	StringLike []StringLikeParameters `json:"stringLike,omitempty" tf:"string_like,omitempty"`

	// +kubebuilder:validation:Optional
	StringNotEquals []StringNotEqualsParameters `json:"stringNotEquals,omitempty" tf:"string_not_equals,omitempty"`

	// +kubebuilder:validation:Optional
	StringNotLike []StringNotLikeParameters `json:"stringNotLike,omitempty" tf:"string_not_like,omitempty"`
}

type SelectionInitParameters struct {
	Condition []ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +listType=set
	NotResources []*string `json:"notResources,omitempty" tf:"not_resources,omitempty"`

	PlanID *string `json:"planId,omitempty" tf:"plan_id,omitempty"`

	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	SelectionTag []SelectionTagInitParameters `json:"selectionTag,omitempty" tf:"selection_tag,omitempty"`
}

type SelectionObservation struct {
	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	IAMRoleArn *string `json:"iamRoleArn,omitempty" tf:"iam_role_arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +listType=set
	NotResources []*string `json:"notResources,omitempty" tf:"not_resources,omitempty"`

	PlanID *string `json:"planId,omitempty" tf:"plan_id,omitempty"`

	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	SelectionTag []SelectionTagObservation `json:"selectionTag,omitempty" tf:"selection_tag,omitempty"`
}

type SelectionParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	NotResources []*string `json:"notResources,omitempty" tf:"not_resources,omitempty"`

	// +kubebuilder:validation:Optional
	PlanID *string `json:"planId,omitempty" tf:"plan_id,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// +kubebuilder:validation:Optional
	SelectionTag []SelectionTagParameters `json:"selectionTag,omitempty" tf:"selection_tag,omitempty"`
}

type SelectionTagInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SelectionTagObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SelectionTagParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type StringEqualsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringEqualsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringEqualsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type StringLikeInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringLikeObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringLikeParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type StringNotEqualsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringNotEqualsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringNotEqualsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type StringNotLikeInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringNotLikeObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringNotLikeParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// SelectionSpec defines the desired state of Selection
type SelectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SelectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SelectionInitParameters `json:"initProvider,omitempty"`
}

// SelectionStatus defines the observed state of Selection.
type SelectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SelectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Selection is the Schema for the Selections API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type Selection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.planId) || (has(self.initProvider) && has(self.initProvider.planId))",message="spec.forProvider.planId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resources) || (has(self.initProvider) && has(self.initProvider.resources))",message="spec.forProvider.resources is a required parameter"
	Spec   SelectionSpec   `json:"spec"`
	Status SelectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SelectionList contains a list of Selections
type SelectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Selection `json:"items"`
}

// Repository type metadata.
var (
	Selection_Kind             = "Selection"
	Selection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Selection_Kind}.String()
	Selection_KindAPIVersion   = Selection_Kind + "." + CRDGroupVersion.String()
	Selection_GroupVersionKind = CRDGroupVersion.WithKind(Selection_Kind)
)

func init() {
	SchemeBuilder.Register(&Selection{}, &SelectionList{})
}
