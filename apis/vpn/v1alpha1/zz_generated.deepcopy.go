//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Connection) DeepCopyInto(out *Connection) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Connection.
func (in *Connection) DeepCopy() *Connection {
	if in == nil {
		return nil
	}
	out := new(Connection)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Connection) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionInitParameters) DeepCopyInto(out *ConnectionInitParameters) {
	*out = *in
	if in.CustomerGatewayID != nil {
		in, out := &in.CustomerGatewayID, &out.CustomerGatewayID
		*out = new(string)
		**out = **in
	}
	if in.EnableAcceleration != nil {
		in, out := &in.EnableAcceleration, &out.EnableAcceleration
		*out = new(bool)
		**out = **in
	}
	if in.LocalIPv4NetworkCidr != nil {
		in, out := &in.LocalIPv4NetworkCidr, &out.LocalIPv4NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.LocalIPv6NetworkCidr != nil {
		in, out := &in.LocalIPv6NetworkCidr, &out.LocalIPv6NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.RemoteIPv4NetworkCidr != nil {
		in, out := &in.RemoteIPv4NetworkCidr, &out.RemoteIPv4NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.RemoteIPv6NetworkCidr != nil {
		in, out := &in.RemoteIPv6NetworkCidr, &out.RemoteIPv6NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.StaticRoutesOnly != nil {
		in, out := &in.StaticRoutesOnly, &out.StaticRoutesOnly
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TransitGatewayID != nil {
		in, out := &in.TransitGatewayID, &out.TransitGatewayID
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1DpdTimeoutAction != nil {
		in, out := &in.Tunnel1DpdTimeoutAction, &out.Tunnel1DpdTimeoutAction
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1DpdTimeoutSeconds != nil {
		in, out := &in.Tunnel1DpdTimeoutSeconds, &out.Tunnel1DpdTimeoutSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1IkeVersions != nil {
		in, out := &in.Tunnel1IkeVersions, &out.Tunnel1IkeVersions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1InsideCidr != nil {
		in, out := &in.Tunnel1InsideCidr, &out.Tunnel1InsideCidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1InsideIPv6Cidr != nil {
		in, out := &in.Tunnel1InsideIPv6Cidr, &out.Tunnel1InsideIPv6Cidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1Phase1DhGroupNumbers != nil {
		in, out := &in.Tunnel1Phase1DhGroupNumbers, &out.Tunnel1Phase1DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase1EncryptionAlgorithms != nil {
		in, out := &in.Tunnel1Phase1EncryptionAlgorithms, &out.Tunnel1Phase1EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase1IntegrityAlgorithms != nil {
		in, out := &in.Tunnel1Phase1IntegrityAlgorithms, &out.Tunnel1Phase1IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase1LifetimeSeconds != nil {
		in, out := &in.Tunnel1Phase1LifetimeSeconds, &out.Tunnel1Phase1LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1Phase2DhGroupNumbers != nil {
		in, out := &in.Tunnel1Phase2DhGroupNumbers, &out.Tunnel1Phase2DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase2EncryptionAlgorithms != nil {
		in, out := &in.Tunnel1Phase2EncryptionAlgorithms, &out.Tunnel1Phase2EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase2IntegrityAlgorithms != nil {
		in, out := &in.Tunnel1Phase2IntegrityAlgorithms, &out.Tunnel1Phase2IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase2LifetimeSeconds != nil {
		in, out := &in.Tunnel1Phase2LifetimeSeconds, &out.Tunnel1Phase2LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1PresharedKeySecretRef != nil {
		in, out := &in.Tunnel1PresharedKeySecretRef, &out.Tunnel1PresharedKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Tunnel1RekeyFuzzPercentage != nil {
		in, out := &in.Tunnel1RekeyFuzzPercentage, &out.Tunnel1RekeyFuzzPercentage
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1RekeyMarginTimeSeconds != nil {
		in, out := &in.Tunnel1RekeyMarginTimeSeconds, &out.Tunnel1RekeyMarginTimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1ReplayWindowSize != nil {
		in, out := &in.Tunnel1ReplayWindowSize, &out.Tunnel1ReplayWindowSize
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1StartupAction != nil {
		in, out := &in.Tunnel1StartupAction, &out.Tunnel1StartupAction
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2DpdTimeoutAction != nil {
		in, out := &in.Tunnel2DpdTimeoutAction, &out.Tunnel2DpdTimeoutAction
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2DpdTimeoutSeconds != nil {
		in, out := &in.Tunnel2DpdTimeoutSeconds, &out.Tunnel2DpdTimeoutSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2IkeVersions != nil {
		in, out := &in.Tunnel2IkeVersions, &out.Tunnel2IkeVersions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2InsideCidr != nil {
		in, out := &in.Tunnel2InsideCidr, &out.Tunnel2InsideCidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2InsideIPv6Cidr != nil {
		in, out := &in.Tunnel2InsideIPv6Cidr, &out.Tunnel2InsideIPv6Cidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2Phase1DhGroupNumbers != nil {
		in, out := &in.Tunnel2Phase1DhGroupNumbers, &out.Tunnel2Phase1DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase1EncryptionAlgorithms != nil {
		in, out := &in.Tunnel2Phase1EncryptionAlgorithms, &out.Tunnel2Phase1EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase1IntegrityAlgorithms != nil {
		in, out := &in.Tunnel2Phase1IntegrityAlgorithms, &out.Tunnel2Phase1IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase1LifetimeSeconds != nil {
		in, out := &in.Tunnel2Phase1LifetimeSeconds, &out.Tunnel2Phase1LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2Phase2DhGroupNumbers != nil {
		in, out := &in.Tunnel2Phase2DhGroupNumbers, &out.Tunnel2Phase2DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase2EncryptionAlgorithms != nil {
		in, out := &in.Tunnel2Phase2EncryptionAlgorithms, &out.Tunnel2Phase2EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase2IntegrityAlgorithms != nil {
		in, out := &in.Tunnel2Phase2IntegrityAlgorithms, &out.Tunnel2Phase2IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase2LifetimeSeconds != nil {
		in, out := &in.Tunnel2Phase2LifetimeSeconds, &out.Tunnel2Phase2LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2PresharedKeySecretRef != nil {
		in, out := &in.Tunnel2PresharedKeySecretRef, &out.Tunnel2PresharedKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Tunnel2RekeyFuzzPercentage != nil {
		in, out := &in.Tunnel2RekeyFuzzPercentage, &out.Tunnel2RekeyFuzzPercentage
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2RekeyMarginTimeSeconds != nil {
		in, out := &in.Tunnel2RekeyMarginTimeSeconds, &out.Tunnel2RekeyMarginTimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2ReplayWindowSize != nil {
		in, out := &in.Tunnel2ReplayWindowSize, &out.Tunnel2ReplayWindowSize
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2StartupAction != nil {
		in, out := &in.Tunnel2StartupAction, &out.Tunnel2StartupAction
		*out = new(string)
		**out = **in
	}
	if in.TunnelInsideIPVersion != nil {
		in, out := &in.TunnelInsideIPVersion, &out.TunnelInsideIPVersion
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VPNGatewayID != nil {
		in, out := &in.VPNGatewayID, &out.VPNGatewayID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionInitParameters.
func (in *ConnectionInitParameters) DeepCopy() *ConnectionInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionList) DeepCopyInto(out *ConnectionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Connection, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionList.
func (in *ConnectionList) DeepCopy() *ConnectionList {
	if in == nil {
		return nil
	}
	out := new(ConnectionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConnectionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionObservation) DeepCopyInto(out *ConnectionObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.CoreNetworkArn != nil {
		in, out := &in.CoreNetworkArn, &out.CoreNetworkArn
		*out = new(string)
		**out = **in
	}
	if in.CoreNetworkAttachmentArn != nil {
		in, out := &in.CoreNetworkAttachmentArn, &out.CoreNetworkAttachmentArn
		*out = new(string)
		**out = **in
	}
	if in.CustomerGatewayID != nil {
		in, out := &in.CustomerGatewayID, &out.CustomerGatewayID
		*out = new(string)
		**out = **in
	}
	if in.EnableAcceleration != nil {
		in, out := &in.EnableAcceleration, &out.EnableAcceleration
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LocalIPv4NetworkCidr != nil {
		in, out := &in.LocalIPv4NetworkCidr, &out.LocalIPv4NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.LocalIPv6NetworkCidr != nil {
		in, out := &in.LocalIPv6NetworkCidr, &out.LocalIPv6NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.RemoteIPv4NetworkCidr != nil {
		in, out := &in.RemoteIPv4NetworkCidr, &out.RemoteIPv4NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.RemoteIPv6NetworkCidr != nil {
		in, out := &in.RemoteIPv6NetworkCidr, &out.RemoteIPv6NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.Routes != nil {
		in, out := &in.Routes, &out.Routes
		*out = make([]RoutesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StaticRoutesOnly != nil {
		in, out := &in.StaticRoutesOnly, &out.StaticRoutesOnly
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TransitGatewayAttachmentID != nil {
		in, out := &in.TransitGatewayAttachmentID, &out.TransitGatewayAttachmentID
		*out = new(string)
		**out = **in
	}
	if in.TransitGatewayID != nil {
		in, out := &in.TransitGatewayID, &out.TransitGatewayID
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1Address != nil {
		in, out := &in.Tunnel1Address, &out.Tunnel1Address
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1BGPAsn != nil {
		in, out := &in.Tunnel1BGPAsn, &out.Tunnel1BGPAsn
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1BGPHoldtime != nil {
		in, out := &in.Tunnel1BGPHoldtime, &out.Tunnel1BGPHoldtime
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1CgwInsideAddress != nil {
		in, out := &in.Tunnel1CgwInsideAddress, &out.Tunnel1CgwInsideAddress
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1DpdTimeoutAction != nil {
		in, out := &in.Tunnel1DpdTimeoutAction, &out.Tunnel1DpdTimeoutAction
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1DpdTimeoutSeconds != nil {
		in, out := &in.Tunnel1DpdTimeoutSeconds, &out.Tunnel1DpdTimeoutSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1IkeVersions != nil {
		in, out := &in.Tunnel1IkeVersions, &out.Tunnel1IkeVersions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1InsideCidr != nil {
		in, out := &in.Tunnel1InsideCidr, &out.Tunnel1InsideCidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1InsideIPv6Cidr != nil {
		in, out := &in.Tunnel1InsideIPv6Cidr, &out.Tunnel1InsideIPv6Cidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1Phase1DhGroupNumbers != nil {
		in, out := &in.Tunnel1Phase1DhGroupNumbers, &out.Tunnel1Phase1DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase1EncryptionAlgorithms != nil {
		in, out := &in.Tunnel1Phase1EncryptionAlgorithms, &out.Tunnel1Phase1EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase1IntegrityAlgorithms != nil {
		in, out := &in.Tunnel1Phase1IntegrityAlgorithms, &out.Tunnel1Phase1IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase1LifetimeSeconds != nil {
		in, out := &in.Tunnel1Phase1LifetimeSeconds, &out.Tunnel1Phase1LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1Phase2DhGroupNumbers != nil {
		in, out := &in.Tunnel1Phase2DhGroupNumbers, &out.Tunnel1Phase2DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase2EncryptionAlgorithms != nil {
		in, out := &in.Tunnel1Phase2EncryptionAlgorithms, &out.Tunnel1Phase2EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase2IntegrityAlgorithms != nil {
		in, out := &in.Tunnel1Phase2IntegrityAlgorithms, &out.Tunnel1Phase2IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase2LifetimeSeconds != nil {
		in, out := &in.Tunnel1Phase2LifetimeSeconds, &out.Tunnel1Phase2LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1RekeyFuzzPercentage != nil {
		in, out := &in.Tunnel1RekeyFuzzPercentage, &out.Tunnel1RekeyFuzzPercentage
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1RekeyMarginTimeSeconds != nil {
		in, out := &in.Tunnel1RekeyMarginTimeSeconds, &out.Tunnel1RekeyMarginTimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1ReplayWindowSize != nil {
		in, out := &in.Tunnel1ReplayWindowSize, &out.Tunnel1ReplayWindowSize
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1StartupAction != nil {
		in, out := &in.Tunnel1StartupAction, &out.Tunnel1StartupAction
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1VgwInsideAddress != nil {
		in, out := &in.Tunnel1VgwInsideAddress, &out.Tunnel1VgwInsideAddress
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2Address != nil {
		in, out := &in.Tunnel2Address, &out.Tunnel2Address
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2BGPAsn != nil {
		in, out := &in.Tunnel2BGPAsn, &out.Tunnel2BGPAsn
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2BGPHoldtime != nil {
		in, out := &in.Tunnel2BGPHoldtime, &out.Tunnel2BGPHoldtime
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2CgwInsideAddress != nil {
		in, out := &in.Tunnel2CgwInsideAddress, &out.Tunnel2CgwInsideAddress
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2DpdTimeoutAction != nil {
		in, out := &in.Tunnel2DpdTimeoutAction, &out.Tunnel2DpdTimeoutAction
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2DpdTimeoutSeconds != nil {
		in, out := &in.Tunnel2DpdTimeoutSeconds, &out.Tunnel2DpdTimeoutSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2IkeVersions != nil {
		in, out := &in.Tunnel2IkeVersions, &out.Tunnel2IkeVersions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2InsideCidr != nil {
		in, out := &in.Tunnel2InsideCidr, &out.Tunnel2InsideCidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2InsideIPv6Cidr != nil {
		in, out := &in.Tunnel2InsideIPv6Cidr, &out.Tunnel2InsideIPv6Cidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2Phase1DhGroupNumbers != nil {
		in, out := &in.Tunnel2Phase1DhGroupNumbers, &out.Tunnel2Phase1DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase1EncryptionAlgorithms != nil {
		in, out := &in.Tunnel2Phase1EncryptionAlgorithms, &out.Tunnel2Phase1EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase1IntegrityAlgorithms != nil {
		in, out := &in.Tunnel2Phase1IntegrityAlgorithms, &out.Tunnel2Phase1IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase1LifetimeSeconds != nil {
		in, out := &in.Tunnel2Phase1LifetimeSeconds, &out.Tunnel2Phase1LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2Phase2DhGroupNumbers != nil {
		in, out := &in.Tunnel2Phase2DhGroupNumbers, &out.Tunnel2Phase2DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase2EncryptionAlgorithms != nil {
		in, out := &in.Tunnel2Phase2EncryptionAlgorithms, &out.Tunnel2Phase2EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase2IntegrityAlgorithms != nil {
		in, out := &in.Tunnel2Phase2IntegrityAlgorithms, &out.Tunnel2Phase2IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase2LifetimeSeconds != nil {
		in, out := &in.Tunnel2Phase2LifetimeSeconds, &out.Tunnel2Phase2LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2RekeyFuzzPercentage != nil {
		in, out := &in.Tunnel2RekeyFuzzPercentage, &out.Tunnel2RekeyFuzzPercentage
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2RekeyMarginTimeSeconds != nil {
		in, out := &in.Tunnel2RekeyMarginTimeSeconds, &out.Tunnel2RekeyMarginTimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2ReplayWindowSize != nil {
		in, out := &in.Tunnel2ReplayWindowSize, &out.Tunnel2ReplayWindowSize
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2StartupAction != nil {
		in, out := &in.Tunnel2StartupAction, &out.Tunnel2StartupAction
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2VgwInsideAddress != nil {
		in, out := &in.Tunnel2VgwInsideAddress, &out.Tunnel2VgwInsideAddress
		*out = new(string)
		**out = **in
	}
	if in.TunnelInsideIPVersion != nil {
		in, out := &in.TunnelInsideIPVersion, &out.TunnelInsideIPVersion
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VPNGatewayID != nil {
		in, out := &in.VPNGatewayID, &out.VPNGatewayID
		*out = new(string)
		**out = **in
	}
	if in.VgwTelemetry != nil {
		in, out := &in.VgwTelemetry, &out.VgwTelemetry
		*out = make([]VgwTelemetryObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionObservation.
func (in *ConnectionObservation) DeepCopy() *ConnectionObservation {
	if in == nil {
		return nil
	}
	out := new(ConnectionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionParameters) DeepCopyInto(out *ConnectionParameters) {
	*out = *in
	if in.CustomerGatewayID != nil {
		in, out := &in.CustomerGatewayID, &out.CustomerGatewayID
		*out = new(string)
		**out = **in
	}
	if in.EnableAcceleration != nil {
		in, out := &in.EnableAcceleration, &out.EnableAcceleration
		*out = new(bool)
		**out = **in
	}
	if in.LocalIPv4NetworkCidr != nil {
		in, out := &in.LocalIPv4NetworkCidr, &out.LocalIPv4NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.LocalIPv6NetworkCidr != nil {
		in, out := &in.LocalIPv6NetworkCidr, &out.LocalIPv6NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.RemoteIPv4NetworkCidr != nil {
		in, out := &in.RemoteIPv4NetworkCidr, &out.RemoteIPv4NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.RemoteIPv6NetworkCidr != nil {
		in, out := &in.RemoteIPv6NetworkCidr, &out.RemoteIPv6NetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.StaticRoutesOnly != nil {
		in, out := &in.StaticRoutesOnly, &out.StaticRoutesOnly
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TransitGatewayID != nil {
		in, out := &in.TransitGatewayID, &out.TransitGatewayID
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1DpdTimeoutAction != nil {
		in, out := &in.Tunnel1DpdTimeoutAction, &out.Tunnel1DpdTimeoutAction
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1DpdTimeoutSeconds != nil {
		in, out := &in.Tunnel1DpdTimeoutSeconds, &out.Tunnel1DpdTimeoutSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1IkeVersions != nil {
		in, out := &in.Tunnel1IkeVersions, &out.Tunnel1IkeVersions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1InsideCidr != nil {
		in, out := &in.Tunnel1InsideCidr, &out.Tunnel1InsideCidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1InsideIPv6Cidr != nil {
		in, out := &in.Tunnel1InsideIPv6Cidr, &out.Tunnel1InsideIPv6Cidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel1Phase1DhGroupNumbers != nil {
		in, out := &in.Tunnel1Phase1DhGroupNumbers, &out.Tunnel1Phase1DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase1EncryptionAlgorithms != nil {
		in, out := &in.Tunnel1Phase1EncryptionAlgorithms, &out.Tunnel1Phase1EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase1IntegrityAlgorithms != nil {
		in, out := &in.Tunnel1Phase1IntegrityAlgorithms, &out.Tunnel1Phase1IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase1LifetimeSeconds != nil {
		in, out := &in.Tunnel1Phase1LifetimeSeconds, &out.Tunnel1Phase1LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1Phase2DhGroupNumbers != nil {
		in, out := &in.Tunnel1Phase2DhGroupNumbers, &out.Tunnel1Phase2DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase2EncryptionAlgorithms != nil {
		in, out := &in.Tunnel1Phase2EncryptionAlgorithms, &out.Tunnel1Phase2EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase2IntegrityAlgorithms != nil {
		in, out := &in.Tunnel1Phase2IntegrityAlgorithms, &out.Tunnel1Phase2IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel1Phase2LifetimeSeconds != nil {
		in, out := &in.Tunnel1Phase2LifetimeSeconds, &out.Tunnel1Phase2LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1PresharedKeySecretRef != nil {
		in, out := &in.Tunnel1PresharedKeySecretRef, &out.Tunnel1PresharedKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Tunnel1RekeyFuzzPercentage != nil {
		in, out := &in.Tunnel1RekeyFuzzPercentage, &out.Tunnel1RekeyFuzzPercentage
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1RekeyMarginTimeSeconds != nil {
		in, out := &in.Tunnel1RekeyMarginTimeSeconds, &out.Tunnel1RekeyMarginTimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1ReplayWindowSize != nil {
		in, out := &in.Tunnel1ReplayWindowSize, &out.Tunnel1ReplayWindowSize
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel1StartupAction != nil {
		in, out := &in.Tunnel1StartupAction, &out.Tunnel1StartupAction
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2DpdTimeoutAction != nil {
		in, out := &in.Tunnel2DpdTimeoutAction, &out.Tunnel2DpdTimeoutAction
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2DpdTimeoutSeconds != nil {
		in, out := &in.Tunnel2DpdTimeoutSeconds, &out.Tunnel2DpdTimeoutSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2IkeVersions != nil {
		in, out := &in.Tunnel2IkeVersions, &out.Tunnel2IkeVersions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2InsideCidr != nil {
		in, out := &in.Tunnel2InsideCidr, &out.Tunnel2InsideCidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2InsideIPv6Cidr != nil {
		in, out := &in.Tunnel2InsideIPv6Cidr, &out.Tunnel2InsideIPv6Cidr
		*out = new(string)
		**out = **in
	}
	if in.Tunnel2Phase1DhGroupNumbers != nil {
		in, out := &in.Tunnel2Phase1DhGroupNumbers, &out.Tunnel2Phase1DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase1EncryptionAlgorithms != nil {
		in, out := &in.Tunnel2Phase1EncryptionAlgorithms, &out.Tunnel2Phase1EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase1IntegrityAlgorithms != nil {
		in, out := &in.Tunnel2Phase1IntegrityAlgorithms, &out.Tunnel2Phase1IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase1LifetimeSeconds != nil {
		in, out := &in.Tunnel2Phase1LifetimeSeconds, &out.Tunnel2Phase1LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2Phase2DhGroupNumbers != nil {
		in, out := &in.Tunnel2Phase2DhGroupNumbers, &out.Tunnel2Phase2DhGroupNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase2EncryptionAlgorithms != nil {
		in, out := &in.Tunnel2Phase2EncryptionAlgorithms, &out.Tunnel2Phase2EncryptionAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase2IntegrityAlgorithms != nil {
		in, out := &in.Tunnel2Phase2IntegrityAlgorithms, &out.Tunnel2Phase2IntegrityAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tunnel2Phase2LifetimeSeconds != nil {
		in, out := &in.Tunnel2Phase2LifetimeSeconds, &out.Tunnel2Phase2LifetimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2PresharedKeySecretRef != nil {
		in, out := &in.Tunnel2PresharedKeySecretRef, &out.Tunnel2PresharedKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Tunnel2RekeyFuzzPercentage != nil {
		in, out := &in.Tunnel2RekeyFuzzPercentage, &out.Tunnel2RekeyFuzzPercentage
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2RekeyMarginTimeSeconds != nil {
		in, out := &in.Tunnel2RekeyMarginTimeSeconds, &out.Tunnel2RekeyMarginTimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2ReplayWindowSize != nil {
		in, out := &in.Tunnel2ReplayWindowSize, &out.Tunnel2ReplayWindowSize
		*out = new(float64)
		**out = **in
	}
	if in.Tunnel2StartupAction != nil {
		in, out := &in.Tunnel2StartupAction, &out.Tunnel2StartupAction
		*out = new(string)
		**out = **in
	}
	if in.TunnelInsideIPVersion != nil {
		in, out := &in.TunnelInsideIPVersion, &out.TunnelInsideIPVersion
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VPNGatewayID != nil {
		in, out := &in.VPNGatewayID, &out.VPNGatewayID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionParameters.
func (in *ConnectionParameters) DeepCopy() *ConnectionParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionSpec) DeepCopyInto(out *ConnectionSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionSpec.
func (in *ConnectionSpec) DeepCopy() *ConnectionSpec {
	if in == nil {
		return nil
	}
	out := new(ConnectionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionStatus) DeepCopyInto(out *ConnectionStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionStatus.
func (in *ConnectionStatus) DeepCopy() *ConnectionStatus {
	if in == nil {
		return nil
	}
	out := new(ConnectionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayRoutePropagation) DeepCopyInto(out *GatewayRoutePropagation) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayRoutePropagation.
func (in *GatewayRoutePropagation) DeepCopy() *GatewayRoutePropagation {
	if in == nil {
		return nil
	}
	out := new(GatewayRoutePropagation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GatewayRoutePropagation) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayRoutePropagationInitParameters) DeepCopyInto(out *GatewayRoutePropagationInitParameters) {
	*out = *in
	if in.RouteTableID != nil {
		in, out := &in.RouteTableID, &out.RouteTableID
		*out = new(string)
		**out = **in
	}
	if in.VPNGatewayID != nil {
		in, out := &in.VPNGatewayID, &out.VPNGatewayID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayRoutePropagationInitParameters.
func (in *GatewayRoutePropagationInitParameters) DeepCopy() *GatewayRoutePropagationInitParameters {
	if in == nil {
		return nil
	}
	out := new(GatewayRoutePropagationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayRoutePropagationList) DeepCopyInto(out *GatewayRoutePropagationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GatewayRoutePropagation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayRoutePropagationList.
func (in *GatewayRoutePropagationList) DeepCopy() *GatewayRoutePropagationList {
	if in == nil {
		return nil
	}
	out := new(GatewayRoutePropagationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GatewayRoutePropagationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayRoutePropagationObservation) DeepCopyInto(out *GatewayRoutePropagationObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.RouteTableID != nil {
		in, out := &in.RouteTableID, &out.RouteTableID
		*out = new(string)
		**out = **in
	}
	if in.VPNGatewayID != nil {
		in, out := &in.VPNGatewayID, &out.VPNGatewayID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayRoutePropagationObservation.
func (in *GatewayRoutePropagationObservation) DeepCopy() *GatewayRoutePropagationObservation {
	if in == nil {
		return nil
	}
	out := new(GatewayRoutePropagationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayRoutePropagationParameters) DeepCopyInto(out *GatewayRoutePropagationParameters) {
	*out = *in
	if in.RouteTableID != nil {
		in, out := &in.RouteTableID, &out.RouteTableID
		*out = new(string)
		**out = **in
	}
	if in.VPNGatewayID != nil {
		in, out := &in.VPNGatewayID, &out.VPNGatewayID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayRoutePropagationParameters.
func (in *GatewayRoutePropagationParameters) DeepCopy() *GatewayRoutePropagationParameters {
	if in == nil {
		return nil
	}
	out := new(GatewayRoutePropagationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayRoutePropagationSpec) DeepCopyInto(out *GatewayRoutePropagationSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayRoutePropagationSpec.
func (in *GatewayRoutePropagationSpec) DeepCopy() *GatewayRoutePropagationSpec {
	if in == nil {
		return nil
	}
	out := new(GatewayRoutePropagationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayRoutePropagationStatus) DeepCopyInto(out *GatewayRoutePropagationStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayRoutePropagationStatus.
func (in *GatewayRoutePropagationStatus) DeepCopy() *GatewayRoutePropagationStatus {
	if in == nil {
		return nil
	}
	out := new(GatewayRoutePropagationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoutesInitParameters) DeepCopyInto(out *RoutesInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoutesInitParameters.
func (in *RoutesInitParameters) DeepCopy() *RoutesInitParameters {
	if in == nil {
		return nil
	}
	out := new(RoutesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoutesObservation) DeepCopyInto(out *RoutesObservation) {
	*out = *in
	if in.DestinationCidrBlock != nil {
		in, out := &in.DestinationCidrBlock, &out.DestinationCidrBlock
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoutesObservation.
func (in *RoutesObservation) DeepCopy() *RoutesObservation {
	if in == nil {
		return nil
	}
	out := new(RoutesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoutesParameters) DeepCopyInto(out *RoutesParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoutesParameters.
func (in *RoutesParameters) DeepCopy() *RoutesParameters {
	if in == nil {
		return nil
	}
	out := new(RoutesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VgwTelemetryInitParameters) DeepCopyInto(out *VgwTelemetryInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VgwTelemetryInitParameters.
func (in *VgwTelemetryInitParameters) DeepCopy() *VgwTelemetryInitParameters {
	if in == nil {
		return nil
	}
	out := new(VgwTelemetryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VgwTelemetryObservation) DeepCopyInto(out *VgwTelemetryObservation) {
	*out = *in
	if in.AcceptedRouteCount != nil {
		in, out := &in.AcceptedRouteCount, &out.AcceptedRouteCount
		*out = new(float64)
		**out = **in
	}
	if in.CertificateArn != nil {
		in, out := &in.CertificateArn, &out.CertificateArn
		*out = new(string)
		**out = **in
	}
	if in.LastStatusChange != nil {
		in, out := &in.LastStatusChange, &out.LastStatusChange
		*out = new(string)
		**out = **in
	}
	if in.OutsideIPAddress != nil {
		in, out := &in.OutsideIPAddress, &out.OutsideIPAddress
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StatusMessage != nil {
		in, out := &in.StatusMessage, &out.StatusMessage
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VgwTelemetryObservation.
func (in *VgwTelemetryObservation) DeepCopy() *VgwTelemetryObservation {
	if in == nil {
		return nil
	}
	out := new(VgwTelemetryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VgwTelemetryParameters) DeepCopyInto(out *VgwTelemetryParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VgwTelemetryParameters.
func (in *VgwTelemetryParameters) DeepCopy() *VgwTelemetryParameters {
	if in == nil {
		return nil
	}
	out := new(VgwTelemetryParameters)
	in.DeepCopyInto(out)
	return out
}
