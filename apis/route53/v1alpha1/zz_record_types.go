// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AliasInitParameters struct {
	EvaluateTargetHealth *bool `json:"evaluateTargetHealth,omitempty" tf:"evaluate_target_health,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type AliasObservation struct {
	EvaluateTargetHealth *bool `json:"evaluateTargetHealth,omitempty" tf:"evaluate_target_health,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type AliasParameters struct {

	// +kubebuilder:validation:Optional
	EvaluateTargetHealth *bool `json:"evaluateTargetHealth" tf:"evaluate_target_health,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

type FailoverRoutingPolicyInitParameters struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FailoverRoutingPolicyObservation struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FailoverRoutingPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type GeolocationRoutingPolicyInitParameters struct {
	Continent *string `json:"continent,omitempty" tf:"continent,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	Subdivision *string `json:"subdivision,omitempty" tf:"subdivision,omitempty"`
}

type GeolocationRoutingPolicyObservation struct {
	Continent *string `json:"continent,omitempty" tf:"continent,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	Subdivision *string `json:"subdivision,omitempty" tf:"subdivision,omitempty"`
}

type GeolocationRoutingPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Continent *string `json:"continent,omitempty" tf:"continent,omitempty"`

	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// +kubebuilder:validation:Optional
	Subdivision *string `json:"subdivision,omitempty" tf:"subdivision,omitempty"`
}

type LatencyRoutingPolicyInitParameters struct {
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type LatencyRoutingPolicyObservation struct {
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type LatencyRoutingPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`
}

type RecordInitParameters struct {
	Alias []AliasInitParameters `json:"alias,omitempty" tf:"alias,omitempty"`

	AllowOverwrite *bool `json:"allowOverwrite,omitempty" tf:"allow_overwrite,omitempty"`

	FailoverRoutingPolicy []FailoverRoutingPolicyInitParameters `json:"failoverRoutingPolicy,omitempty" tf:"failover_routing_policy,omitempty"`

	GeolocationRoutingPolicy []GeolocationRoutingPolicyInitParameters `json:"geolocationRoutingPolicy,omitempty" tf:"geolocation_routing_policy,omitempty"`

	HealthCheckID *string `json:"healthCheckId,omitempty" tf:"health_check_id,omitempty"`

	LatencyRoutingPolicy []LatencyRoutingPolicyInitParameters `json:"latencyRoutingPolicy,omitempty" tf:"latency_routing_policy,omitempty"`

	MultivalueAnswerRoutingPolicy *bool `json:"multivalueAnswerRoutingPolicy,omitempty" tf:"multivalue_answer_routing_policy,omitempty"`

	// +listType=set
	Records []*string `json:"records,omitempty" tf:"records,omitempty"`

	SetIdentifier *string `json:"setIdentifier,omitempty" tf:"set_identifier,omitempty"`

	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	WeightedRoutingPolicy []WeightedRoutingPolicyInitParameters `json:"weightedRoutingPolicy,omitempty" tf:"weighted_routing_policy,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RecordObservation struct {
	Alias []AliasObservation `json:"alias,omitempty" tf:"alias,omitempty"`

	AllowOverwrite *bool `json:"allowOverwrite,omitempty" tf:"allow_overwrite,omitempty"`

	FailoverRoutingPolicy []FailoverRoutingPolicyObservation `json:"failoverRoutingPolicy,omitempty" tf:"failover_routing_policy,omitempty"`

	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	GeolocationRoutingPolicy []GeolocationRoutingPolicyObservation `json:"geolocationRoutingPolicy,omitempty" tf:"geolocation_routing_policy,omitempty"`

	HealthCheckID *string `json:"healthCheckId,omitempty" tf:"health_check_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LatencyRoutingPolicy []LatencyRoutingPolicyObservation `json:"latencyRoutingPolicy,omitempty" tf:"latency_routing_policy,omitempty"`

	MultivalueAnswerRoutingPolicy *bool `json:"multivalueAnswerRoutingPolicy,omitempty" tf:"multivalue_answer_routing_policy,omitempty"`

	// +listType=set
	Records []*string `json:"records,omitempty" tf:"records,omitempty"`

	SetIdentifier *string `json:"setIdentifier,omitempty" tf:"set_identifier,omitempty"`

	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	WeightedRoutingPolicy []WeightedRoutingPolicyObservation `json:"weightedRoutingPolicy,omitempty" tf:"weighted_routing_policy,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RecordParameters struct {

	// +kubebuilder:validation:Optional
	Alias []AliasParameters `json:"alias,omitempty" tf:"alias,omitempty"`

	// +kubebuilder:validation:Optional
	AllowOverwrite *bool `json:"allowOverwrite,omitempty" tf:"allow_overwrite,omitempty"`

	// +kubebuilder:validation:Optional
	FailoverRoutingPolicy []FailoverRoutingPolicyParameters `json:"failoverRoutingPolicy,omitempty" tf:"failover_routing_policy,omitempty"`

	// +kubebuilder:validation:Optional
	GeolocationRoutingPolicy []GeolocationRoutingPolicyParameters `json:"geolocationRoutingPolicy,omitempty" tf:"geolocation_routing_policy,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckID *string `json:"healthCheckId,omitempty" tf:"health_check_id,omitempty"`

	// +kubebuilder:validation:Optional
	LatencyRoutingPolicy []LatencyRoutingPolicyParameters `json:"latencyRoutingPolicy,omitempty" tf:"latency_routing_policy,omitempty"`

	// +kubebuilder:validation:Optional
	MultivalueAnswerRoutingPolicy *bool `json:"multivalueAnswerRoutingPolicy,omitempty" tf:"multivalue_answer_routing_policy,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Records []*string `json:"records,omitempty" tf:"records,omitempty"`

	// +kubebuilder:validation:Optional
	SetIdentifier *string `json:"setIdentifier,omitempty" tf:"set_identifier,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	WeightedRoutingPolicy []WeightedRoutingPolicyParameters `json:"weightedRoutingPolicy,omitempty" tf:"weighted_routing_policy,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type WeightedRoutingPolicyInitParameters struct {
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type WeightedRoutingPolicyObservation struct {
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type WeightedRoutingPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

// RecordSpec defines the desired state of Record
type RecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RecordParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RecordInitParameters `json:"initProvider,omitempty"`
}

// RecordStatus defines the observed state of Record.
type RecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Record is the Schema for the Records API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type Record struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   RecordSpec   `json:"spec"`
	Status RecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RecordList contains a list of Records
type RecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Record `json:"items"`
}

// Repository type metadata.
var (
	Record_Kind             = "Record"
	Record_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Record_Kind}.String()
	Record_KindAPIVersion   = Record_Kind + "." + CRDGroupVersion.String()
	Record_GroupVersionKind = CRDGroupVersion.WithKind(Record_Kind)
)

func init() {
	SchemeBuilder.Register(&Record{}, &RecordList{})
}
