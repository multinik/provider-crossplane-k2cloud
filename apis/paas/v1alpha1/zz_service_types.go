// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupSettingsInitParameters struct {
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ExpirationDays *float64 `json:"expirationDays,omitempty" tf:"expiration_days,omitempty"`

	NotificationEmail *string `json:"notificationEmail,omitempty" tf:"notification_email,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	UserLogin *string `json:"userLogin,omitempty" tf:"user_login,omitempty"`
}

type BackupSettingsObservation struct {
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ExpirationDays *float64 `json:"expirationDays,omitempty" tf:"expiration_days,omitempty"`

	NotificationEmail *string `json:"notificationEmail,omitempty" tf:"notification_email,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	UserLogin *string `json:"userLogin,omitempty" tf:"user_login,omitempty"`
}

type BackupSettingsParameters struct {

	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ExpirationDays *float64 `json:"expirationDays,omitempty" tf:"expiration_days,omitempty"`

	// +kubebuilder:validation:Optional
	NotificationEmail *string `json:"notificationEmail,omitempty" tf:"notification_email,omitempty"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// +kubebuilder:validation:Optional
	UserLogin *string `json:"userLogin,omitempty" tf:"user_login,omitempty"`
}

type DataVolumeInitParameters struct {
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DataVolumeObservation struct {
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DataVolumeParameters struct {

	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DatabaseInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	User []UserInitParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type DatabaseObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	User []UserObservation `json:"user,omitempty" tf:"user,omitempty"`
}

type DatabaseParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	User []UserParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type DatabaseUserInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Options []*string `json:"options,omitempty" tf:"options,omitempty"`

	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`
}

type DatabaseUserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Options []*string `json:"options,omitempty" tf:"options,omitempty"`

	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`
}

type DatabaseUserParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Options []*string `json:"options,omitempty" tf:"options,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`
}

type ElasticsearchInitParameters struct {
	AllowAnonymous *string `json:"allowAnonymous,omitempty" tf:"allow_anonymous,omitempty"`

	AnonymousRole *string `json:"anonymousRole,omitempty" tf:"anonymous_role,omitempty"`

	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	Kibana *bool `json:"kibana,omitempty" tf:"kibana,omitempty"`

	Logging []LoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	Monitoring []MonitoringInitParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ElasticsearchObservation struct {
	AllowAnonymous *string `json:"allowAnonymous,omitempty" tf:"allow_anonymous,omitempty"`

	AnonymousRole *string `json:"anonymousRole,omitempty" tf:"anonymous_role,omitempty"`

	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	Kibana *bool `json:"kibana,omitempty" tf:"kibana,omitempty"`

	Logging []LoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	Monitoring []MonitoringObservation `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ElasticsearchParameters struct {

	// +kubebuilder:validation:Optional
	AllowAnonymous *string `json:"allowAnonymous,omitempty" tf:"allow_anonymous,omitempty"`

	// +kubebuilder:validation:Optional
	AnonymousRole *string `json:"anonymousRole,omitempty" tf:"anonymous_role,omitempty"`

	// +kubebuilder:validation:Optional
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// +kubebuilder:validation:Optional
	Kibana *bool `json:"kibana,omitempty" tf:"kibana,omitempty"`

	// +kubebuilder:validation:Optional
	Logging []LoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// +kubebuilder:validation:Optional
	Monitoring []MonitoringParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type EndpointsInitParameters struct {
}

type EndpointsObservation struct {

	// +listType=set
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EndpointsParameters struct {
}

type InstancesEndpointsInitParameters struct {
}

type InstancesEndpointsObservation struct {
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type InstancesEndpointsParameters struct {
}

type InstancesInitParameters struct {
}

type InstancesObservation struct {
	Endpoints []InstancesEndpointsObservation `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	Index *float64 `json:"index,omitempty" tf:"index,omitempty"`

	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	InterfaceID *string `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type InstancesParameters struct {
}

type LoggingInitParameters struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type LoggingObservation struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type LoggingParameters struct {

	// +kubebuilder:validation:Optional
	LogTo *string `json:"logTo" tf:"log_to,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type MemcachedInitParameters struct {
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	Logging []MemcachedLoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	Monitoring []MemcachedMonitoringInitParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`
}

type MemcachedLoggingInitParameters struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type MemcachedLoggingObservation struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type MemcachedLoggingParameters struct {

	// +kubebuilder:validation:Optional
	LogTo *string `json:"logTo" tf:"log_to,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type MemcachedMonitoringInitParameters struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MemcachedMonitoringObservation struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MemcachedMonitoringParameters struct {

	// +kubebuilder:validation:Optional
	MonitorBy *string `json:"monitorBy" tf:"monitor_by,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MemcachedObservation struct {
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	Logging []MemcachedLoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	Monitoring []MemcachedMonitoringObservation `json:"monitoring,omitempty" tf:"monitoring,omitempty"`
}

type MemcachedParameters struct {

	// +kubebuilder:validation:Optional
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// +kubebuilder:validation:Optional
	Logging []MemcachedLoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// +kubebuilder:validation:Optional
	Monitoring []MemcachedMonitoringParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`
}

type MongodbInitParameters struct {
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	Database []DatabaseInitParameters `json:"database,omitempty" tf:"database,omitempty"`

	JournalCommitInterval *float64 `json:"journalCommitInterval,omitempty" tf:"journal_commit_interval,omitempty"`

	Logging []MongodbLoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	Maxconns *float64 `json:"maxconns,omitempty" tf:"maxconns,omitempty"`

	Monitoring []MongodbMonitoringInitParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	Quiet *bool `json:"quiet,omitempty" tf:"quiet,omitempty"`

	Slowms *float64 `json:"slowms,omitempty" tf:"slowms,omitempty"`

	StorageEngineCacheSize *float64 `json:"storageEngineCacheSize,omitempty" tf:"storage_engine_cache_size,omitempty"`

	User []MongodbUserInitParameters `json:"user,omitempty" tf:"user,omitempty"`

	Verbositylevel *string `json:"verbositylevel,omitempty" tf:"verbositylevel,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MongodbLoggingInitParameters struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type MongodbLoggingObservation struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type MongodbLoggingParameters struct {

	// +kubebuilder:validation:Optional
	LogTo *string `json:"logTo" tf:"log_to,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type MongodbMonitoringInitParameters struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MongodbMonitoringObservation struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MongodbMonitoringParameters struct {

	// +kubebuilder:validation:Optional
	MonitorBy *string `json:"monitorBy" tf:"monitor_by,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MongodbObservation struct {
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	Database []DatabaseObservation `json:"database,omitempty" tf:"database,omitempty"`

	JournalCommitInterval *float64 `json:"journalCommitInterval,omitempty" tf:"journal_commit_interval,omitempty"`

	Logging []MongodbLoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	Maxconns *float64 `json:"maxconns,omitempty" tf:"maxconns,omitempty"`

	Monitoring []MongodbMonitoringObservation `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	Quiet *bool `json:"quiet,omitempty" tf:"quiet,omitempty"`

	Slowms *float64 `json:"slowms,omitempty" tf:"slowms,omitempty"`

	StorageEngineCacheSize *float64 `json:"storageEngineCacheSize,omitempty" tf:"storage_engine_cache_size,omitempty"`

	User []MongodbUserObservation `json:"user,omitempty" tf:"user,omitempty"`

	Verbositylevel *string `json:"verbositylevel,omitempty" tf:"verbositylevel,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MongodbParameters struct {

	// +kubebuilder:validation:Optional
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// +kubebuilder:validation:Optional
	Database []DatabaseParameters `json:"database,omitempty" tf:"database,omitempty"`

	// +kubebuilder:validation:Optional
	JournalCommitInterval *float64 `json:"journalCommitInterval,omitempty" tf:"journal_commit_interval,omitempty"`

	// +kubebuilder:validation:Optional
	Logging []MongodbLoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// +kubebuilder:validation:Optional
	Maxconns *float64 `json:"maxconns,omitempty" tf:"maxconns,omitempty"`

	// +kubebuilder:validation:Optional
	Monitoring []MongodbMonitoringParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// +kubebuilder:validation:Optional
	Quiet *bool `json:"quiet,omitempty" tf:"quiet,omitempty"`

	// +kubebuilder:validation:Optional
	Slowms *float64 `json:"slowms,omitempty" tf:"slowms,omitempty"`

	// +kubebuilder:validation:Optional
	StorageEngineCacheSize *float64 `json:"storageEngineCacheSize,omitempty" tf:"storage_engine_cache_size,omitempty"`

	// +kubebuilder:validation:Optional
	User []MongodbUserParameters `json:"user,omitempty" tf:"user,omitempty"`

	// +kubebuilder:validation:Optional
	Verbositylevel *string `json:"verbositylevel,omitempty" tf:"verbositylevel,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type MongodbUserInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`
}

type MongodbUserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MongodbUserParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`
}

type MonitoringInitParameters struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MonitoringObservation struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MonitoringParameters struct {

	// +kubebuilder:validation:Optional
	MonitorBy *string `json:"monitorBy" tf:"monitor_by,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MySQLDatabaseInitParameters struct {
	BackupDBName *string `json:"backupDbName,omitempty" tf:"backup_db_name,omitempty"`

	BackupEnabled *bool `json:"backupEnabled,omitempty" tf:"backup_enabled,omitempty"`

	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	Charset *string `json:"charset,omitempty" tf:"charset,omitempty"`

	Collate *string `json:"collate,omitempty" tf:"collate,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	User []DatabaseUserInitParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type MySQLDatabaseObservation struct {
	BackupDBName *string `json:"backupDbName,omitempty" tf:"backup_db_name,omitempty"`

	BackupEnabled *bool `json:"backupEnabled,omitempty" tf:"backup_enabled,omitempty"`

	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	Charset *string `json:"charset,omitempty" tf:"charset,omitempty"`

	Collate *string `json:"collate,omitempty" tf:"collate,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	User []DatabaseUserObservation `json:"user,omitempty" tf:"user,omitempty"`
}

type MySQLDatabaseParameters struct {

	// +kubebuilder:validation:Optional
	BackupDBName *string `json:"backupDbName,omitempty" tf:"backup_db_name,omitempty"`

	// +kubebuilder:validation:Optional
	BackupEnabled *bool `json:"backupEnabled,omitempty" tf:"backup_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	// +kubebuilder:validation:Optional
	Charset *string `json:"charset,omitempty" tf:"charset,omitempty"`

	// +kubebuilder:validation:Optional
	Collate *string `json:"collate,omitempty" tf:"collate,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	User []DatabaseUserParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type MySQLInitParameters struct {
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	Database []MySQLDatabaseInitParameters `json:"database,omitempty" tf:"database,omitempty"`

	// +mapType=granular
	GaleraOptions map[string]*string `json:"galeraOptions,omitempty" tf:"galera_options,omitempty"`

	GcacheSize *float64 `json:"gcacheSize,omitempty" tf:"gcache_size,omitempty"`

	GcsFcFactor *float64 `json:"gcsFcFactor,omitempty" tf:"gcs_fc_factor,omitempty"`

	GcsFcLimit *float64 `json:"gcsFcLimit,omitempty" tf:"gcs_fc_limit,omitempty"`

	GcsFcMasterSlave *string `json:"gcsFcMasterSlave,omitempty" tf:"gcs_fc_master_slave,omitempty"`

	GcsFcSinglePrimary *string `json:"gcsFcSinglePrimary,omitempty" tf:"gcs_fc_single_primary,omitempty"`

	InnodbBufferPoolInstances *float64 `json:"innodbBufferPoolInstances,omitempty" tf:"innodb_buffer_pool_instances,omitempty"`

	InnodbBufferPoolSize *string `json:"innodbBufferPoolSize,omitempty" tf:"innodb_buffer_pool_size,omitempty"`

	InnodbChangeBuffering *string `json:"innodbChangeBuffering,omitempty" tf:"innodb_change_buffering,omitempty"`

	InnodbFlushLogAtTrxCommit *float64 `json:"innodbFlushLogAtTrxCommit,omitempty" tf:"innodb_flush_log_at_trx_commit,omitempty"`

	InnodbIoCapacity *string `json:"innodbIoCapacity,omitempty" tf:"innodb_io_capacity,omitempty"`

	InnodbIoCapacityMax *string `json:"innodbIoCapacityMax,omitempty" tf:"innodb_io_capacity_max,omitempty"`

	InnodbLogFileSize *string `json:"innodbLogFileSize,omitempty" tf:"innodb_log_file_size,omitempty"`

	InnodbLogFilesInGroup *float64 `json:"innodbLogFilesInGroup,omitempty" tf:"innodb_log_files_in_group,omitempty"`

	InnodbPurgeThreads *float64 `json:"innodbPurgeThreads,omitempty" tf:"innodb_purge_threads,omitempty"`

	InnodbStrictMode *string `json:"innodbStrictMode,omitempty" tf:"innodb_strict_mode,omitempty"`

	InnodbSyncArraySize *float64 `json:"innodbSyncArraySize,omitempty" tf:"innodb_sync_array_size,omitempty"`

	InnodbThreadConcurrency *float64 `json:"innodbThreadConcurrency,omitempty" tf:"innodb_thread_concurrency,omitempty"`

	Logging []MySQLLoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	MaxAllowedPacket *float64 `json:"maxAllowedPacket,omitempty" tf:"max_allowed_packet,omitempty"`

	MaxConnectErrors *string `json:"maxConnectErrors,omitempty" tf:"max_connect_errors,omitempty"`

	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	MaxHeapTableSize *string `json:"maxHeapTableSize,omitempty" tf:"max_heap_table_size,omitempty"`

	Monitoring []MySQLMonitoringInitParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	PxcStrictMode *string `json:"pxcStrictMode,omitempty" tf:"pxc_strict_mode,omitempty"`

	TableOpenCache *float64 `json:"tableOpenCache,omitempty" tf:"table_open_cache,omitempty"`

	ThreadCacheSize *float64 `json:"threadCacheSize,omitempty" tf:"thread_cache_size,omitempty"`

	TmpTableSize *string `json:"tmpTableSize,omitempty" tf:"tmp_table_size,omitempty"`

	TransactionIsolation *string `json:"transactionIsolation,omitempty" tf:"transaction_isolation,omitempty"`

	User []MySQLUserInitParameters `json:"user,omitempty" tf:"user,omitempty"`

	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	WaitTimeout *float64 `json:"waitTimeout,omitempty" tf:"wait_timeout,omitempty"`
}

type MySQLLoggingInitParameters struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type MySQLLoggingObservation struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type MySQLLoggingParameters struct {

	// +kubebuilder:validation:Optional
	LogTo *string `json:"logTo" tf:"log_to,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type MySQLMonitoringInitParameters struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MySQLMonitoringObservation struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MySQLMonitoringParameters struct {

	// +kubebuilder:validation:Optional
	MonitorBy *string `json:"monitorBy" tf:"monitor_by,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type MySQLObservation struct {
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	Database []MySQLDatabaseObservation `json:"database,omitempty" tf:"database,omitempty"`

	// +mapType=granular
	GaleraOptions map[string]*string `json:"galeraOptions,omitempty" tf:"galera_options,omitempty"`

	GcacheSize *float64 `json:"gcacheSize,omitempty" tf:"gcache_size,omitempty"`

	GcsFcFactor *float64 `json:"gcsFcFactor,omitempty" tf:"gcs_fc_factor,omitempty"`

	GcsFcLimit *float64 `json:"gcsFcLimit,omitempty" tf:"gcs_fc_limit,omitempty"`

	GcsFcMasterSlave *string `json:"gcsFcMasterSlave,omitempty" tf:"gcs_fc_master_slave,omitempty"`

	GcsFcSinglePrimary *string `json:"gcsFcSinglePrimary,omitempty" tf:"gcs_fc_single_primary,omitempty"`

	InnodbBufferPoolInstances *float64 `json:"innodbBufferPoolInstances,omitempty" tf:"innodb_buffer_pool_instances,omitempty"`

	InnodbBufferPoolSize *string `json:"innodbBufferPoolSize,omitempty" tf:"innodb_buffer_pool_size,omitempty"`

	InnodbChangeBuffering *string `json:"innodbChangeBuffering,omitempty" tf:"innodb_change_buffering,omitempty"`

	InnodbFlushLogAtTrxCommit *float64 `json:"innodbFlushLogAtTrxCommit,omitempty" tf:"innodb_flush_log_at_trx_commit,omitempty"`

	InnodbIoCapacity *string `json:"innodbIoCapacity,omitempty" tf:"innodb_io_capacity,omitempty"`

	InnodbIoCapacityMax *string `json:"innodbIoCapacityMax,omitempty" tf:"innodb_io_capacity_max,omitempty"`

	InnodbLogFileSize *string `json:"innodbLogFileSize,omitempty" tf:"innodb_log_file_size,omitempty"`

	InnodbLogFilesInGroup *float64 `json:"innodbLogFilesInGroup,omitempty" tf:"innodb_log_files_in_group,omitempty"`

	InnodbPurgeThreads *float64 `json:"innodbPurgeThreads,omitempty" tf:"innodb_purge_threads,omitempty"`

	InnodbStrictMode *string `json:"innodbStrictMode,omitempty" tf:"innodb_strict_mode,omitempty"`

	InnodbSyncArraySize *float64 `json:"innodbSyncArraySize,omitempty" tf:"innodb_sync_array_size,omitempty"`

	InnodbThreadConcurrency *float64 `json:"innodbThreadConcurrency,omitempty" tf:"innodb_thread_concurrency,omitempty"`

	Logging []MySQLLoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	MaxAllowedPacket *float64 `json:"maxAllowedPacket,omitempty" tf:"max_allowed_packet,omitempty"`

	MaxConnectErrors *string `json:"maxConnectErrors,omitempty" tf:"max_connect_errors,omitempty"`

	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	MaxHeapTableSize *string `json:"maxHeapTableSize,omitempty" tf:"max_heap_table_size,omitempty"`

	Monitoring []MySQLMonitoringObservation `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	PxcStrictMode *string `json:"pxcStrictMode,omitempty" tf:"pxc_strict_mode,omitempty"`

	TableOpenCache *float64 `json:"tableOpenCache,omitempty" tf:"table_open_cache,omitempty"`

	ThreadCacheSize *float64 `json:"threadCacheSize,omitempty" tf:"thread_cache_size,omitempty"`

	TmpTableSize *string `json:"tmpTableSize,omitempty" tf:"tmp_table_size,omitempty"`

	TransactionIsolation *string `json:"transactionIsolation,omitempty" tf:"transaction_isolation,omitempty"`

	User []MySQLUserObservation `json:"user,omitempty" tf:"user,omitempty"`

	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	WaitTimeout *float64 `json:"waitTimeout,omitempty" tf:"wait_timeout,omitempty"`
}

type MySQLParameters struct {

	// +kubebuilder:validation:Optional
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// +kubebuilder:validation:Optional
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	Database []MySQLDatabaseParameters `json:"database,omitempty" tf:"database,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	GaleraOptions map[string]*string `json:"galeraOptions,omitempty" tf:"galera_options,omitempty"`

	// +kubebuilder:validation:Optional
	GcacheSize *float64 `json:"gcacheSize,omitempty" tf:"gcache_size,omitempty"`

	// +kubebuilder:validation:Optional
	GcsFcFactor *float64 `json:"gcsFcFactor,omitempty" tf:"gcs_fc_factor,omitempty"`

	// +kubebuilder:validation:Optional
	GcsFcLimit *float64 `json:"gcsFcLimit,omitempty" tf:"gcs_fc_limit,omitempty"`

	// +kubebuilder:validation:Optional
	GcsFcMasterSlave *string `json:"gcsFcMasterSlave,omitempty" tf:"gcs_fc_master_slave,omitempty"`

	// +kubebuilder:validation:Optional
	GcsFcSinglePrimary *string `json:"gcsFcSinglePrimary,omitempty" tf:"gcs_fc_single_primary,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbBufferPoolInstances *float64 `json:"innodbBufferPoolInstances,omitempty" tf:"innodb_buffer_pool_instances,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbBufferPoolSize *string `json:"innodbBufferPoolSize,omitempty" tf:"innodb_buffer_pool_size,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbChangeBuffering *string `json:"innodbChangeBuffering,omitempty" tf:"innodb_change_buffering,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbFlushLogAtTrxCommit *float64 `json:"innodbFlushLogAtTrxCommit,omitempty" tf:"innodb_flush_log_at_trx_commit,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbIoCapacity *string `json:"innodbIoCapacity,omitempty" tf:"innodb_io_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbIoCapacityMax *string `json:"innodbIoCapacityMax,omitempty" tf:"innodb_io_capacity_max,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbLogFileSize *string `json:"innodbLogFileSize,omitempty" tf:"innodb_log_file_size,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbLogFilesInGroup *float64 `json:"innodbLogFilesInGroup,omitempty" tf:"innodb_log_files_in_group,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbPurgeThreads *float64 `json:"innodbPurgeThreads,omitempty" tf:"innodb_purge_threads,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbStrictMode *string `json:"innodbStrictMode,omitempty" tf:"innodb_strict_mode,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbSyncArraySize *float64 `json:"innodbSyncArraySize,omitempty" tf:"innodb_sync_array_size,omitempty"`

	// +kubebuilder:validation:Optional
	InnodbThreadConcurrency *float64 `json:"innodbThreadConcurrency,omitempty" tf:"innodb_thread_concurrency,omitempty"`

	// +kubebuilder:validation:Optional
	Logging []MySQLLoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// +kubebuilder:validation:Optional
	MaxAllowedPacket *float64 `json:"maxAllowedPacket,omitempty" tf:"max_allowed_packet,omitempty"`

	// +kubebuilder:validation:Optional
	MaxConnectErrors *string `json:"maxConnectErrors,omitempty" tf:"max_connect_errors,omitempty"`

	// +kubebuilder:validation:Optional
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// +kubebuilder:validation:Optional
	MaxHeapTableSize *string `json:"maxHeapTableSize,omitempty" tf:"max_heap_table_size,omitempty"`

	// +kubebuilder:validation:Optional
	Monitoring []MySQLMonitoringParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// +kubebuilder:validation:Optional
	PxcStrictMode *string `json:"pxcStrictMode,omitempty" tf:"pxc_strict_mode,omitempty"`

	// +kubebuilder:validation:Optional
	TableOpenCache *float64 `json:"tableOpenCache,omitempty" tf:"table_open_cache,omitempty"`

	// +kubebuilder:validation:Optional
	ThreadCacheSize *float64 `json:"threadCacheSize,omitempty" tf:"thread_cache_size,omitempty"`

	// +kubebuilder:validation:Optional
	TmpTableSize *string `json:"tmpTableSize,omitempty" tf:"tmp_table_size,omitempty"`

	// +kubebuilder:validation:Optional
	TransactionIsolation *string `json:"transactionIsolation,omitempty" tf:"transaction_isolation,omitempty"`

	// +kubebuilder:validation:Optional
	User []MySQLUserParameters `json:"user,omitempty" tf:"user,omitempty"`

	// +kubebuilder:validation:Optional
	Vendor *string `json:"vendor" tf:"vendor,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`

	// +kubebuilder:validation:Optional
	WaitTimeout *float64 `json:"waitTimeout,omitempty" tf:"wait_timeout,omitempty"`
}

type MySQLUserInitParameters struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`
}

type MySQLUserObservation struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MySQLUserParameters struct {

	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`
}

type PgsqlDatabaseInitParameters struct {
	BackupDBName *string `json:"backupDbName,omitempty" tf:"backup_db_name,omitempty"`

	BackupEnabled *bool `json:"backupEnabled,omitempty" tf:"backup_enabled,omitempty"`

	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// +listType=set
	Extensions []*string `json:"extensions,omitempty" tf:"extensions,omitempty"`

	Locale *string `json:"locale,omitempty" tf:"locale,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	User []PgsqlDatabaseUserInitParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type PgsqlDatabaseObservation struct {
	BackupDBName *string `json:"backupDbName,omitempty" tf:"backup_db_name,omitempty"`

	BackupEnabled *bool `json:"backupEnabled,omitempty" tf:"backup_enabled,omitempty"`

	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// +listType=set
	Extensions []*string `json:"extensions,omitempty" tf:"extensions,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Locale *string `json:"locale,omitempty" tf:"locale,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	User []PgsqlDatabaseUserObservation `json:"user,omitempty" tf:"user,omitempty"`
}

type PgsqlDatabaseParameters struct {

	// +kubebuilder:validation:Optional
	BackupDBName *string `json:"backupDbName,omitempty" tf:"backup_db_name,omitempty"`

	// +kubebuilder:validation:Optional
	BackupEnabled *bool `json:"backupEnabled,omitempty" tf:"backup_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	// +kubebuilder:validation:Optional
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Extensions []*string `json:"extensions,omitempty" tf:"extensions,omitempty"`

	// +kubebuilder:validation:Optional
	Locale *string `json:"locale,omitempty" tf:"locale,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Owner *string `json:"owner" tf:"owner,omitempty"`

	// +kubebuilder:validation:Optional
	User []PgsqlDatabaseUserParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type PgsqlDatabaseUserInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PgsqlDatabaseUserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PgsqlDatabaseUserParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type PgsqlInitParameters struct {
	Autovacuum *string `json:"autovacuum,omitempty" tf:"autovacuum,omitempty"`

	AutovacuumAnalyzeScaleFactor *float64 `json:"autovacuumAnalyzeScaleFactor,omitempty" tf:"autovacuum_analyze_scale_factor,omitempty"`

	AutovacuumMaxWorkers *float64 `json:"autovacuumMaxWorkers,omitempty" tf:"autovacuum_max_workers,omitempty"`

	AutovacuumVacuumCostDelay *float64 `json:"autovacuumVacuumCostDelay,omitempty" tf:"autovacuum_vacuum_cost_delay,omitempty"`

	AutovacuumVacuumCostLimit *float64 `json:"autovacuumVacuumCostLimit,omitempty" tf:"autovacuum_vacuum_cost_limit,omitempty"`

	AutovacuumVacuumScaleFactor *float64 `json:"autovacuumVacuumScaleFactor,omitempty" tf:"autovacuum_vacuum_scale_factor,omitempty"`

	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	Database []PgsqlDatabaseInitParameters `json:"database,omitempty" tf:"database,omitempty"`

	EffectiveCacheSize *string `json:"effectiveCacheSize,omitempty" tf:"effective_cache_size,omitempty"`

	EffectiveIoConcurrency *float64 `json:"effectiveIoConcurrency,omitempty" tf:"effective_io_concurrency,omitempty"`

	Logging []PgsqlLoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	MaintenanceWorkMem *string `json:"maintenanceWorkMem,omitempty" tf:"maintenance_work_mem,omitempty"`

	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	MaxParallelMaintenanceWorkers *float64 `json:"maxParallelMaintenanceWorkers,omitempty" tf:"max_parallel_maintenance_workers,omitempty"`

	MaxParallelWorkers *float64 `json:"maxParallelWorkers,omitempty" tf:"max_parallel_workers,omitempty"`

	MaxParallelWorkersPerGather *float64 `json:"maxParallelWorkersPerGather,omitempty" tf:"max_parallel_workers_per_gather,omitempty"`

	MaxWalSize *string `json:"maxWalSize,omitempty" tf:"max_wal_size,omitempty"`

	MaxWorkerProcesses *float64 `json:"maxWorkerProcesses,omitempty" tf:"max_worker_processes,omitempty"`

	MinWalSize *string `json:"minWalSize,omitempty" tf:"min_wal_size,omitempty"`

	Monitoring []PgsqlMonitoringInitParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	ReplicationMode *string `json:"replicationMode,omitempty" tf:"replication_mode,omitempty"`

	SharedBuffers *string `json:"sharedBuffers,omitempty" tf:"shared_buffers,omitempty"`

	User []PgsqlUserInitParameters `json:"user,omitempty" tf:"user,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	WalBuffers *float64 `json:"walBuffers,omitempty" tf:"wal_buffers,omitempty"`

	WalKeepSegments *float64 `json:"walKeepSegments,omitempty" tf:"wal_keep_segments,omitempty"`

	WorkMem *string `json:"workMem,omitempty" tf:"work_mem,omitempty"`
}

type PgsqlLoggingInitParameters struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type PgsqlLoggingObservation struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type PgsqlLoggingParameters struct {

	// +kubebuilder:validation:Optional
	LogTo *string `json:"logTo" tf:"log_to,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type PgsqlMonitoringInitParameters struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type PgsqlMonitoringObservation struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type PgsqlMonitoringParameters struct {

	// +kubebuilder:validation:Optional
	MonitorBy *string `json:"monitorBy" tf:"monitor_by,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type PgsqlObservation struct {
	Autovacuum *string `json:"autovacuum,omitempty" tf:"autovacuum,omitempty"`

	AutovacuumAnalyzeScaleFactor *float64 `json:"autovacuumAnalyzeScaleFactor,omitempty" tf:"autovacuum_analyze_scale_factor,omitempty"`

	AutovacuumMaxWorkers *float64 `json:"autovacuumMaxWorkers,omitempty" tf:"autovacuum_max_workers,omitempty"`

	AutovacuumVacuumCostDelay *float64 `json:"autovacuumVacuumCostDelay,omitempty" tf:"autovacuum_vacuum_cost_delay,omitempty"`

	AutovacuumVacuumCostLimit *float64 `json:"autovacuumVacuumCostLimit,omitempty" tf:"autovacuum_vacuum_cost_limit,omitempty"`

	AutovacuumVacuumScaleFactor *float64 `json:"autovacuumVacuumScaleFactor,omitempty" tf:"autovacuum_vacuum_scale_factor,omitempty"`

	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	Database []PgsqlDatabaseObservation `json:"database,omitempty" tf:"database,omitempty"`

	EffectiveCacheSize *string `json:"effectiveCacheSize,omitempty" tf:"effective_cache_size,omitempty"`

	EffectiveIoConcurrency *float64 `json:"effectiveIoConcurrency,omitempty" tf:"effective_io_concurrency,omitempty"`

	Logging []PgsqlLoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	MaintenanceWorkMem *string `json:"maintenanceWorkMem,omitempty" tf:"maintenance_work_mem,omitempty"`

	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	MaxParallelMaintenanceWorkers *float64 `json:"maxParallelMaintenanceWorkers,omitempty" tf:"max_parallel_maintenance_workers,omitempty"`

	MaxParallelWorkers *float64 `json:"maxParallelWorkers,omitempty" tf:"max_parallel_workers,omitempty"`

	MaxParallelWorkersPerGather *float64 `json:"maxParallelWorkersPerGather,omitempty" tf:"max_parallel_workers_per_gather,omitempty"`

	MaxWalSize *string `json:"maxWalSize,omitempty" tf:"max_wal_size,omitempty"`

	MaxWorkerProcesses *float64 `json:"maxWorkerProcesses,omitempty" tf:"max_worker_processes,omitempty"`

	MinWalSize *string `json:"minWalSize,omitempty" tf:"min_wal_size,omitempty"`

	Monitoring []PgsqlMonitoringObservation `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	ReplicationMode *string `json:"replicationMode,omitempty" tf:"replication_mode,omitempty"`

	SharedBuffers *string `json:"sharedBuffers,omitempty" tf:"shared_buffers,omitempty"`

	User []PgsqlUserObservation `json:"user,omitempty" tf:"user,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	WalBuffers *float64 `json:"walBuffers,omitempty" tf:"wal_buffers,omitempty"`

	WalKeepSegments *float64 `json:"walKeepSegments,omitempty" tf:"wal_keep_segments,omitempty"`

	WorkMem *string `json:"workMem,omitempty" tf:"work_mem,omitempty"`
}

type PgsqlParameters struct {

	// +kubebuilder:validation:Optional
	Autovacuum *string `json:"autovacuum,omitempty" tf:"autovacuum,omitempty"`

	// +kubebuilder:validation:Optional
	AutovacuumAnalyzeScaleFactor *float64 `json:"autovacuumAnalyzeScaleFactor,omitempty" tf:"autovacuum_analyze_scale_factor,omitempty"`

	// +kubebuilder:validation:Optional
	AutovacuumMaxWorkers *float64 `json:"autovacuumMaxWorkers,omitempty" tf:"autovacuum_max_workers,omitempty"`

	// +kubebuilder:validation:Optional
	AutovacuumVacuumCostDelay *float64 `json:"autovacuumVacuumCostDelay,omitempty" tf:"autovacuum_vacuum_cost_delay,omitempty"`

	// +kubebuilder:validation:Optional
	AutovacuumVacuumCostLimit *float64 `json:"autovacuumVacuumCostLimit,omitempty" tf:"autovacuum_vacuum_cost_limit,omitempty"`

	// +kubebuilder:validation:Optional
	AutovacuumVacuumScaleFactor *float64 `json:"autovacuumVacuumScaleFactor,omitempty" tf:"autovacuum_vacuum_scale_factor,omitempty"`

	// +kubebuilder:validation:Optional
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// +kubebuilder:validation:Optional
	Database []PgsqlDatabaseParameters `json:"database,omitempty" tf:"database,omitempty"`

	// +kubebuilder:validation:Optional
	EffectiveCacheSize *string `json:"effectiveCacheSize,omitempty" tf:"effective_cache_size,omitempty"`

	// +kubebuilder:validation:Optional
	EffectiveIoConcurrency *float64 `json:"effectiveIoConcurrency,omitempty" tf:"effective_io_concurrency,omitempty"`

	// +kubebuilder:validation:Optional
	Logging []PgsqlLoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// +kubebuilder:validation:Optional
	MaintenanceWorkMem *string `json:"maintenanceWorkMem,omitempty" tf:"maintenance_work_mem,omitempty"`

	// +kubebuilder:validation:Optional
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// +kubebuilder:validation:Optional
	MaxParallelMaintenanceWorkers *float64 `json:"maxParallelMaintenanceWorkers,omitempty" tf:"max_parallel_maintenance_workers,omitempty"`

	// +kubebuilder:validation:Optional
	MaxParallelWorkers *float64 `json:"maxParallelWorkers,omitempty" tf:"max_parallel_workers,omitempty"`

	// +kubebuilder:validation:Optional
	MaxParallelWorkersPerGather *float64 `json:"maxParallelWorkersPerGather,omitempty" tf:"max_parallel_workers_per_gather,omitempty"`

	// +kubebuilder:validation:Optional
	MaxWalSize *string `json:"maxWalSize,omitempty" tf:"max_wal_size,omitempty"`

	// +kubebuilder:validation:Optional
	MaxWorkerProcesses *float64 `json:"maxWorkerProcesses,omitempty" tf:"max_worker_processes,omitempty"`

	// +kubebuilder:validation:Optional
	MinWalSize *string `json:"minWalSize,omitempty" tf:"min_wal_size,omitempty"`

	// +kubebuilder:validation:Optional
	Monitoring []PgsqlMonitoringParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// +kubebuilder:validation:Optional
	ReplicationMode *string `json:"replicationMode,omitempty" tf:"replication_mode,omitempty"`

	// +kubebuilder:validation:Optional
	SharedBuffers *string `json:"sharedBuffers,omitempty" tf:"shared_buffers,omitempty"`

	// +kubebuilder:validation:Optional
	User []PgsqlUserParameters `json:"user,omitempty" tf:"user,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`

	// +kubebuilder:validation:Optional
	WalBuffers *float64 `json:"walBuffers,omitempty" tf:"wal_buffers,omitempty"`

	// +kubebuilder:validation:Optional
	WalKeepSegments *float64 `json:"walKeepSegments,omitempty" tf:"wal_keep_segments,omitempty"`

	// +kubebuilder:validation:Optional
	WorkMem *string `json:"workMem,omitempty" tf:"work_mem,omitempty"`
}

type PgsqlUserInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`
}

type PgsqlUserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PgsqlUserParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`
}

type RabbitmqInitParameters struct {
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	Logging []RabbitmqLoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	Monitoring []RabbitmqMonitoringInitParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RabbitmqLoggingInitParameters struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type RabbitmqLoggingObservation struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type RabbitmqLoggingParameters struct {

	// +kubebuilder:validation:Optional
	LogTo *string `json:"logTo" tf:"log_to,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type RabbitmqMonitoringInitParameters struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type RabbitmqMonitoringObservation struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type RabbitmqMonitoringParameters struct {

	// +kubebuilder:validation:Optional
	MonitorBy *string `json:"monitorBy" tf:"monitor_by,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type RabbitmqObservation struct {
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	Logging []RabbitmqLoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	Monitoring []RabbitmqMonitoringObservation `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RabbitmqParameters struct {

	// +kubebuilder:validation:Optional
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// +kubebuilder:validation:Optional
	Logging []RabbitmqLoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// +kubebuilder:validation:Optional
	Monitoring []RabbitmqMonitoringParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type RedisInitParameters struct {
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	Databases *float64 `json:"databases,omitempty" tf:"databases,omitempty"`

	Logging []RedisLoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	MaxmemoryPolicy *string `json:"maxmemoryPolicy,omitempty" tf:"maxmemory_policy,omitempty"`

	Monitoring []RedisMonitoringInitParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	PersistenceAof *bool `json:"persistenceAof,omitempty" tf:"persistence_aof,omitempty"`

	PersistenceRdb *bool `json:"persistenceRdb,omitempty" tf:"persistence_rdb,omitempty"`

	TCPBacklog *float64 `json:"tcpBacklog,omitempty" tf:"tcp_backlog,omitempty"`

	TCPKeepalive *float64 `json:"tcpKeepalive,omitempty" tf:"tcp_keepalive,omitempty"`

	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RedisLoggingInitParameters struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type RedisLoggingObservation struct {
	LogTo *string `json:"logTo,omitempty" tf:"log_to,omitempty"`

	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type RedisLoggingParameters struct {

	// +kubebuilder:validation:Optional
	LogTo *string `json:"logTo" tf:"log_to,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	LoggingTags []*string `json:"loggingTags,omitempty" tf:"logging_tags,omitempty"`
}

type RedisMonitoringInitParameters struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type RedisMonitoringObservation struct {
	MonitorBy *string `json:"monitorBy,omitempty" tf:"monitor_by,omitempty"`

	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type RedisMonitoringParameters struct {

	// +kubebuilder:validation:Optional
	MonitorBy *string `json:"monitorBy" tf:"monitor_by,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	MonitoringLabels map[string]*string `json:"monitoringLabels,omitempty" tf:"monitoring_labels,omitempty"`
}

type RedisObservation struct {
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	Databases *float64 `json:"databases,omitempty" tf:"databases,omitempty"`

	Logging []RedisLoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	MaxmemoryPolicy *string `json:"maxmemoryPolicy,omitempty" tf:"maxmemory_policy,omitempty"`

	Monitoring []RedisMonitoringObservation `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	PersistenceAof *bool `json:"persistenceAof,omitempty" tf:"persistence_aof,omitempty"`

	PersistenceRdb *bool `json:"persistenceRdb,omitempty" tf:"persistence_rdb,omitempty"`

	TCPBacklog *float64 `json:"tcpBacklog,omitempty" tf:"tcp_backlog,omitempty"`

	TCPKeepalive *float64 `json:"tcpKeepalive,omitempty" tf:"tcp_keepalive,omitempty"`

	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RedisParameters struct {

	// +kubebuilder:validation:Optional
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// +kubebuilder:validation:Optional
	Databases *float64 `json:"databases,omitempty" tf:"databases,omitempty"`

	// +kubebuilder:validation:Optional
	Logging []RedisLoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// +kubebuilder:validation:Optional
	MaxmemoryPolicy *string `json:"maxmemoryPolicy,omitempty" tf:"maxmemory_policy,omitempty"`

	// +kubebuilder:validation:Optional
	Monitoring []RedisMonitoringParameters `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PersistenceAof *bool `json:"persistenceAof,omitempty" tf:"persistence_aof,omitempty"`

	// +kubebuilder:validation:Optional
	PersistenceRdb *bool `json:"persistenceRdb,omitempty" tf:"persistence_rdb,omitempty"`

	// +kubebuilder:validation:Optional
	TCPBacklog *float64 `json:"tcpBacklog,omitempty" tf:"tcp_backlog,omitempty"`

	// +kubebuilder:validation:Optional
	TCPKeepalive *float64 `json:"tcpKeepalive,omitempty" tf:"tcp_keepalive,omitempty"`

	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type RootVolumeInitParameters struct {
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RootVolumeObservation struct {
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RootVolumeParameters struct {

	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServiceInitParameters struct {
	ArbitratorRequired *bool `json:"arbitratorRequired,omitempty" tf:"arbitrator_required,omitempty"`

	BackupSettings []BackupSettingsInitParameters `json:"backupSettings,omitempty" tf:"backup_settings,omitempty"`

	DataVolume []DataVolumeInitParameters `json:"dataVolume,omitempty" tf:"data_volume,omitempty"`

	DeleteInterfacesOnDestroy *bool `json:"deleteInterfacesOnDestroy,omitempty" tf:"delete_interfaces_on_destroy,omitempty"`

	Elasticsearch []ElasticsearchInitParameters `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	HighAvailability *bool `json:"highAvailability,omitempty" tf:"high_availability,omitempty"`

	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	Memcached []MemcachedInitParameters `json:"memcached,omitempty" tf:"memcached,omitempty"`

	Mongodb []MongodbInitParameters `json:"mongodb,omitempty" tf:"mongodb,omitempty"`

	MySQL []MySQLInitParameters `json:"mysql,omitempty" tf:"mysql,omitempty"`

	// +listType=set
	NetworkInterfaceIds []*string `json:"networkInterfaceIds,omitempty" tf:"network_interface_ids,omitempty"`

	Pgsql []PgsqlInitParameters `json:"pgsql,omitempty" tf:"pgsql,omitempty"`

	Rabbitmq []RabbitmqInitParameters `json:"rabbitmq,omitempty" tf:"rabbitmq,omitempty"`

	Redis []RedisInitParameters `json:"redis,omitempty" tf:"redis,omitempty"`

	RootVolume []RootVolumeInitParameters `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	SSHKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name,omitempty"`

	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	UserDataContentType *string `json:"userDataContentType,omitempty" tf:"user_data_content_type,omitempty"`
}

type ServiceObservation struct {
	ArbitratorRequired *bool `json:"arbitratorRequired,omitempty" tf:"arbitrator_required,omitempty"`

	// +listType=set
	AutoCreatedSecurityGroupIds []*string `json:"autoCreatedSecurityGroupIds,omitempty" tf:"auto_created_security_group_ids,omitempty"`

	// +listType=set
	AvailableEnvironmentVersions []*string `json:"availableEnvironmentVersions,omitempty" tf:"available_environment_versions,omitempty"`

	BackupSettings []BackupSettingsObservation `json:"backupSettings,omitempty" tf:"backup_settings,omitempty"`

	DataVolume []DataVolumeObservation `json:"dataVolume,omitempty" tf:"data_volume,omitempty"`

	DeleteInterfacesOnDestroy *bool `json:"deleteInterfacesOnDestroy,omitempty" tf:"delete_interfaces_on_destroy,omitempty"`

	Elasticsearch []ElasticsearchObservation `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	Endpoints []EndpointsObservation `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	EnvironmentVersion *string `json:"environmentVersion,omitempty" tf:"environment_version,omitempty"`

	ErrorCode *string `json:"errorCode,omitempty" tf:"error_code,omitempty"`

	ErrorDescription *string `json:"errorDescription,omitempty" tf:"error_description,omitempty"`

	HighAvailability *bool `json:"highAvailability,omitempty" tf:"high_availability,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	Instances []InstancesObservation `json:"instances,omitempty" tf:"instances,omitempty"`

	Memcached []MemcachedObservation `json:"memcached,omitempty" tf:"memcached,omitempty"`

	Mongodb []MongodbObservation `json:"mongodb,omitempty" tf:"mongodb,omitempty"`

	MySQL []MySQLObservation `json:"mysql,omitempty" tf:"mysql,omitempty"`

	// +listType=set
	NetworkInterfaceIds []*string `json:"networkInterfaceIds,omitempty" tf:"network_interface_ids,omitempty"`

	Pgsql []PgsqlObservation `json:"pgsql,omitempty" tf:"pgsql,omitempty"`

	Rabbitmq []RabbitmqObservation `json:"rabbitmq,omitempty" tf:"rabbitmq,omitempty"`

	Redis []RedisObservation `json:"redis,omitempty" tf:"redis,omitempty"`

	RootVolume []RootVolumeObservation `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	SSHKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name,omitempty"`

	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	ServiceClass *string `json:"serviceClass,omitempty" tf:"service_class,omitempty"`

	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// +listType=set
	SupportedFeatures []*string `json:"supportedFeatures,omitempty" tf:"supported_features,omitempty"`

	TotalCPUCount *float64 `json:"totalCpuCount,omitempty" tf:"total_cpu_count,omitempty"`

	TotalMemory *float64 `json:"totalMemory,omitempty" tf:"total_memory,omitempty"`

	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	UserDataContentType *string `json:"userDataContentType,omitempty" tf:"user_data_content_type,omitempty"`

	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ServiceParameters struct {

	// +kubebuilder:validation:Optional
	ArbitratorRequired *bool `json:"arbitratorRequired,omitempty" tf:"arbitrator_required,omitempty"`

	// +kubebuilder:validation:Optional
	BackupSettings []BackupSettingsParameters `json:"backupSettings,omitempty" tf:"backup_settings,omitempty"`

	// +kubebuilder:validation:Optional
	DataVolume []DataVolumeParameters `json:"dataVolume,omitempty" tf:"data_volume,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteInterfacesOnDestroy *bool `json:"deleteInterfacesOnDestroy,omitempty" tf:"delete_interfaces_on_destroy,omitempty"`

	// +kubebuilder:validation:Optional
	Elasticsearch []ElasticsearchParameters `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	// +kubebuilder:validation:Optional
	HighAvailability *bool `json:"highAvailability,omitempty" tf:"high_availability,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	Memcached []MemcachedParameters `json:"memcached,omitempty" tf:"memcached,omitempty"`

	// +kubebuilder:validation:Optional
	Mongodb []MongodbParameters `json:"mongodb,omitempty" tf:"mongodb,omitempty"`

	// +kubebuilder:validation:Optional
	MySQL []MySQLParameters `json:"mysql,omitempty" tf:"mysql,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	NetworkInterfaceIds []*string `json:"networkInterfaceIds,omitempty" tf:"network_interface_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Pgsql []PgsqlParameters `json:"pgsql,omitempty" tf:"pgsql,omitempty"`

	// +kubebuilder:validation:Optional
	Rabbitmq []RabbitmqParameters `json:"rabbitmq,omitempty" tf:"rabbitmq,omitempty"`

	// +kubebuilder:validation:Optional
	Redis []RedisParameters `json:"redis,omitempty" tf:"redis,omitempty"`

	// +kubebuilder:validation:Optional
	RootVolume []RootVolumeParameters `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// +kubebuilder:validation:Optional
	SSHKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// +kubebuilder:validation:Optional
	UserDataContentType *string `json:"userDataContentType,omitempty" tf:"user_data_content_type,omitempty"`
}

type UserInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type UserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type UserParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

// ServiceSpec defines the desired state of Service
type ServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceInitParameters `json:"initProvider,omitempty"`
}

// ServiceStatus defines the observed state of Service.
type ServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Service is the Schema for the Services API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type Service struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceType) || (has(self.initProvider) && has(self.initProvider.instanceType))",message="spec.forProvider.instanceType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rootVolume) || (has(self.initProvider) && has(self.initProvider.rootVolume))",message="spec.forProvider.rootVolume is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securityGroupIds) || (has(self.initProvider) && has(self.initProvider.securityGroupIds))",message="spec.forProvider.securityGroupIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sshKeyName) || (has(self.initProvider) && has(self.initProvider.sshKeyName))",message="spec.forProvider.sshKeyName is a required parameter"
	Spec   ServiceSpec   `json:"spec"`
	Status ServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceList contains a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Service `json:"items"`
}

// Repository type metadata.
var (
	Service_Kind             = "Service"
	Service_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Service_Kind}.String()
	Service_KindAPIVersion   = Service_Kind + "." + CRDGroupVersion.String()
	Service_GroupVersionKind = CRDGroupVersion.WithKind(Service_Kind)
)

func init() {
	SchemeBuilder.Register(&Service{}, &ServiceList{})
}
