// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupInitParameters struct {
	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	EnableDeletionProtection *string `json:"enableDeletionProtection,omitempty" tf:"enable_deletion_protection,omitempty"`
}

type BackupObservation struct {
	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	Databases []DatabasesObservation `json:"databases,omitempty" tf:"databases,omitempty"`

	EnableDeletionProtection *string `json:"enableDeletionProtection,omitempty" tf:"enable_deletion_protection,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Protected *bool `json:"protected,omitempty" tf:"protected,omitempty"`

	ServiceClass *string `json:"serviceClass,omitempty" tf:"service_class,omitempty"`

	ServiceDeleted *bool `json:"serviceDeleted,omitempty" tf:"service_deleted,omitempty"`

	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type BackupParameters struct {

	// +kubebuilder:validation:Optional
	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	// +kubebuilder:validation:Optional
	EnableDeletionProtection *string `json:"enableDeletionProtection,omitempty" tf:"enable_deletion_protection,omitempty"`
}

type DatabasesInitParameters struct {
}

type DatabasesObservation struct {
	BackupEnabled *bool `json:"backupEnabled,omitempty" tf:"backup_enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	Logfile *string `json:"logfile,omitempty" tf:"logfile,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DatabasesParameters struct {
}

// BackupSpec defines the desired state of Backup
type BackupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BackupInitParameters `json:"initProvider,omitempty"`
}

// BackupStatus defines the observed state of Backup.
type BackupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Backup is the Schema for the Backups API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type Backup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backupId) || (has(self.initProvider) && has(self.initProvider.backupId))",message="spec.forProvider.backupId is a required parameter"
	Spec   BackupSpec   `json:"spec"`
	Status BackupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupList contains a list of Backups
type BackupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Backup `json:"items"`
}

// Repository type metadata.
var (
	Backup_Kind             = "Backup"
	Backup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Backup_Kind}.String()
	Backup_KindAPIVersion   = Backup_Kind + "." + CRDGroupVersion.String()
	Backup_GroupVersionKind = CRDGroupVersion.WithKind(Backup_Kind)
)

func init() {
	SchemeBuilder.Register(&Backup{}, &BackupList{})
}
