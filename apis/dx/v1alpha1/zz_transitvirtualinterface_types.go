// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TransitVirtualInterfaceInitParameters struct {
	AddressFamily *string `json:"addressFamily,omitempty" tf:"address_family,omitempty"`

	AmazonAddress *string `json:"amazonAddress,omitempty" tf:"amazon_address,omitempty"`

	BGPAsn *float64 `json:"bgpAsn,omitempty" tf:"bgp_asn,omitempty"`

	BGPAuthKeySecretRef *v1.SecretKeySelector `json:"bgpAuthKeySecretRef,omitempty" tf:"-"`

	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	CustomerAddress *string `json:"customerAddress,omitempty" tf:"customer_address,omitempty"`

	DxGatewayID *string `json:"dxGatewayId,omitempty" tf:"dx_gateway_id,omitempty"`

	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	SitelinkEnabled *bool `json:"sitelinkEnabled,omitempty" tf:"sitelink_enabled,omitempty"`

	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

type TransitVirtualInterfaceObservation struct {
	AddressFamily *string `json:"addressFamily,omitempty" tf:"address_family,omitempty"`

	AmazonAddress *string `json:"amazonAddress,omitempty" tf:"amazon_address,omitempty"`

	AmazonSideAsn *string `json:"amazonSideAsn,omitempty" tf:"amazon_side_asn,omitempty"`

	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	AwsDevice *string `json:"awsDevice,omitempty" tf:"aws_device,omitempty"`

	BGPAsn *float64 `json:"bgpAsn,omitempty" tf:"bgp_asn,omitempty"`

	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	CustomerAddress *string `json:"customerAddress,omitempty" tf:"customer_address,omitempty"`

	DxGatewayID *string `json:"dxGatewayId,omitempty" tf:"dx_gateway_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	JumboFrameCapable *bool `json:"jumboFrameCapable,omitempty" tf:"jumbo_frame_capable,omitempty"`

	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	SitelinkEnabled *bool `json:"sitelinkEnabled,omitempty" tf:"sitelink_enabled,omitempty"`

	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

type TransitVirtualInterfaceParameters struct {

	// +kubebuilder:validation:Optional
	AddressFamily *string `json:"addressFamily,omitempty" tf:"address_family,omitempty"`

	// +kubebuilder:validation:Optional
	AmazonAddress *string `json:"amazonAddress,omitempty" tf:"amazon_address,omitempty"`

	// +kubebuilder:validation:Optional
	BGPAsn *float64 `json:"bgpAsn,omitempty" tf:"bgp_asn,omitempty"`

	// +kubebuilder:validation:Optional
	BGPAuthKeySecretRef *v1.SecretKeySelector `json:"bgpAuthKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// +kubebuilder:validation:Optional
	CustomerAddress *string `json:"customerAddress,omitempty" tf:"customer_address,omitempty"`

	// +kubebuilder:validation:Optional
	DxGatewayID *string `json:"dxGatewayId,omitempty" tf:"dx_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// +kubebuilder:validation:Optional
	SitelinkEnabled *bool `json:"sitelinkEnabled,omitempty" tf:"sitelink_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// +kubebuilder:validation:Optional
	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

// TransitVirtualInterfaceSpec defines the desired state of TransitVirtualInterface
type TransitVirtualInterfaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransitVirtualInterfaceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TransitVirtualInterfaceInitParameters `json:"initProvider,omitempty"`
}

// TransitVirtualInterfaceStatus defines the observed state of TransitVirtualInterface.
type TransitVirtualInterfaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransitVirtualInterfaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TransitVirtualInterface is the Schema for the TransitVirtualInterfaces API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type TransitVirtualInterface struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bgpAsn) || (has(self.initProvider) && has(self.initProvider.bgpAsn))",message="spec.forProvider.bgpAsn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectionId) || (has(self.initProvider) && has(self.initProvider.connectionId))",message="spec.forProvider.connectionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dxGatewayId) || (has(self.initProvider) && has(self.initProvider.dxGatewayId))",message="spec.forProvider.dxGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vlan) || (has(self.initProvider) && has(self.initProvider.vlan))",message="spec.forProvider.vlan is a required parameter"
	Spec   TransitVirtualInterfaceSpec   `json:"spec"`
	Status TransitVirtualInterfaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransitVirtualInterfaceList contains a list of TransitVirtualInterfaces
type TransitVirtualInterfaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransitVirtualInterface `json:"items"`
}

// Repository type metadata.
var (
	TransitVirtualInterface_Kind             = "TransitVirtualInterface"
	TransitVirtualInterface_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransitVirtualInterface_Kind}.String()
	TransitVirtualInterface_KindAPIVersion   = TransitVirtualInterface_Kind + "." + CRDGroupVersion.String()
	TransitVirtualInterface_GroupVersionKind = CRDGroupVersion.WithKind(TransitVirtualInterface_Kind)
)

func init() {
	SchemeBuilder.Register(&TransitVirtualInterface{}, &TransitVirtualInterfaceList{})
}
