// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EBSBlockDeviceInitParameters struct {
}

type EBSBlockDeviceObservation struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination,omitempty"`

	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	OutpostArn *string `json:"outpostArn,omitempty" tf:"outpost_arn,omitempty"`

	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type EBSBlockDeviceParameters struct {
}

type EphemeralBlockDeviceInitParameters struct {
}

type EphemeralBlockDeviceObservation struct {
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	VirtualName *string `json:"virtualName,omitempty" tf:"virtual_name,omitempty"`
}

type EphemeralBlockDeviceParameters struct {
}

type FromInstanceInitParameters struct {
	DeprecationTime *string `json:"deprecationTime,omitempty" tf:"deprecation_time,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	EBSBlockDevice []EBSBlockDeviceInitParameters `json:"ebsBlockDevice,omitempty" tf:"ebs_block_device,omitempty"`

	EphemeralBlockDevice []EphemeralBlockDeviceInitParameters `json:"ephemeralBlockDevice,omitempty" tf:"ephemeral_block_device,omitempty"`

	SnapshotWithoutReboot *bool `json:"snapshotWithoutReboot,omitempty" tf:"snapshot_without_reboot,omitempty"`

	SourceInstanceID *string `json:"sourceInstanceId,omitempty" tf:"source_instance_id,omitempty"`

	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type FromInstanceObservation struct {
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	BootMode *string `json:"bootMode,omitempty" tf:"boot_mode,omitempty"`

	DeprecationTime *string `json:"deprecationTime,omitempty" tf:"deprecation_time,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	EBSBlockDevice []EBSBlockDeviceObservation `json:"ebsBlockDevice,omitempty" tf:"ebs_block_device,omitempty"`

	EnaSupport *bool `json:"enaSupport,omitempty" tf:"ena_support,omitempty"`

	EphemeralBlockDevice []EphemeralBlockDeviceObservation `json:"ephemeralBlockDevice,omitempty" tf:"ephemeral_block_device,omitempty"`

	Hypervisor *string `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ImageLocation *string `json:"imageLocation,omitempty" tf:"image_location,omitempty"`

	ImageOwnerAlias *string `json:"imageOwnerAlias,omitempty" tf:"image_owner_alias,omitempty"`

	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	KernelID *string `json:"kernelId,omitempty" tf:"kernel_id,omitempty"`

	ManageEBSSnapshots *bool `json:"manageEbsSnapshots,omitempty" tf:"manage_ebs_snapshots,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	PlatformDetails *string `json:"platformDetails,omitempty" tf:"platform_details,omitempty"`

	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	RamdiskID *string `json:"ramdiskId,omitempty" tf:"ramdisk_id,omitempty"`

	RootDeviceName *string `json:"rootDeviceName,omitempty" tf:"root_device_name,omitempty"`

	RootSnapshotID *string `json:"rootSnapshotId,omitempty" tf:"root_snapshot_id,omitempty"`

	SnapshotWithoutReboot *bool `json:"snapshotWithoutReboot,omitempty" tf:"snapshot_without_reboot,omitempty"`

	SourceInstanceID *string `json:"sourceInstanceId,omitempty" tf:"source_instance_id,omitempty"`

	SriovNetSupport *string `json:"sriovNetSupport,omitempty" tf:"sriov_net_support,omitempty"`

	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	UsageOperation *string `json:"usageOperation,omitempty" tf:"usage_operation,omitempty"`

	VirtualizationType *string `json:"virtualizationType,omitempty" tf:"virtualization_type,omitempty"`
}

type FromInstanceParameters struct {

	// +kubebuilder:validation:Optional
	DeprecationTime *string `json:"deprecationTime,omitempty" tf:"deprecation_time,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EBSBlockDevice []EBSBlockDeviceParameters `json:"ebsBlockDevice,omitempty" tf:"ebs_block_device,omitempty"`

	// +kubebuilder:validation:Optional
	EphemeralBlockDevice []EphemeralBlockDeviceParameters `json:"ephemeralBlockDevice,omitempty" tf:"ephemeral_block_device,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotWithoutReboot *bool `json:"snapshotWithoutReboot,omitempty" tf:"snapshot_without_reboot,omitempty"`

	// +kubebuilder:validation:Optional
	SourceInstanceID *string `json:"sourceInstanceId,omitempty" tf:"source_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

// FromInstanceSpec defines the desired state of FromInstance
type FromInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FromInstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FromInstanceInitParameters `json:"initProvider,omitempty"`
}

// FromInstanceStatus defines the observed state of FromInstance.
type FromInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FromInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FromInstance is the Schema for the FromInstances API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type FromInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceInstanceId) || (has(self.initProvider) && has(self.initProvider.sourceInstanceId))",message="spec.forProvider.sourceInstanceId is a required parameter"
	Spec   FromInstanceSpec   `json:"spec"`
	Status FromInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FromInstanceList contains a list of FromInstances
type FromInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FromInstance `json:"items"`
}

// Repository type metadata.
var (
	FromInstance_Kind             = "FromInstance"
	FromInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FromInstance_Kind}.String()
	FromInstance_KindAPIVersion   = FromInstance_Kind + "." + CRDGroupVersion.String()
	FromInstance_GroupVersionKind = CRDGroupVersion.WithKind(FromInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&FromInstance{}, &FromInstanceList{})
}
