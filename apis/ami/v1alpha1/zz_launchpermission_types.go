// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LaunchPermissionInitParameters struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	OrganizationArn *string `json:"organizationArn,omitempty" tf:"organization_arn,omitempty"`

	OrganizationalUnitArn *string `json:"organizationalUnitArn,omitempty" tf:"organizational_unit_arn,omitempty"`
}

type LaunchPermissionObservation struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	OrganizationArn *string `json:"organizationArn,omitempty" tf:"organization_arn,omitempty"`

	OrganizationalUnitArn *string `json:"organizationalUnitArn,omitempty" tf:"organizational_unit_arn,omitempty"`
}

type LaunchPermissionParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Optional
	OrganizationArn *string `json:"organizationArn,omitempty" tf:"organization_arn,omitempty"`

	// +kubebuilder:validation:Optional
	OrganizationalUnitArn *string `json:"organizationalUnitArn,omitempty" tf:"organizational_unit_arn,omitempty"`
}

// LaunchPermissionSpec defines the desired state of LaunchPermission
type LaunchPermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LaunchPermissionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LaunchPermissionInitParameters `json:"initProvider,omitempty"`
}

// LaunchPermissionStatus defines the observed state of LaunchPermission.
type LaunchPermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LaunchPermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LaunchPermission is the Schema for the LaunchPermissions API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type LaunchPermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.imageId) || (has(self.initProvider) && has(self.initProvider.imageId))",message="spec.forProvider.imageId is a required parameter"
	Spec   LaunchPermissionSpec   `json:"spec"`
	Status LaunchPermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LaunchPermissionList contains a list of LaunchPermissions
type LaunchPermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LaunchPermission `json:"items"`
}

// Repository type metadata.
var (
	LaunchPermission_Kind             = "LaunchPermission"
	LaunchPermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LaunchPermission_Kind}.String()
	LaunchPermission_KindAPIVersion   = LaunchPermission_Kind + "." + CRDGroupVersion.String()
	LaunchPermission_GroupVersionKind = CRDGroupVersion.WithKind(LaunchPermission_Kind)
)

func init() {
	SchemeBuilder.Register(&LaunchPermission{}, &LaunchPermissionList{})
}
