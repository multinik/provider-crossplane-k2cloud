// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ACLAssociationInitParameters struct {
	NetworkACLID *string `json:"networkAclId,omitempty" tf:"network_acl_id,omitempty"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type ACLAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NetworkACLID *string `json:"networkAclId,omitempty" tf:"network_acl_id,omitempty"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type ACLAssociationParameters struct {

	// +kubebuilder:validation:Optional
	NetworkACLID *string `json:"networkAclId,omitempty" tf:"network_acl_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

// ACLAssociationSpec defines the desired state of ACLAssociation
type ACLAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ACLAssociationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ACLAssociationInitParameters `json:"initProvider,omitempty"`
}

// ACLAssociationStatus defines the observed state of ACLAssociation.
type ACLAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ACLAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ACLAssociation is the Schema for the ACLAssociations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type ACLAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkAclId) || (has(self.initProvider) && has(self.initProvider.networkAclId))",message="spec.forProvider.networkAclId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subnetId) || (has(self.initProvider) && has(self.initProvider.subnetId))",message="spec.forProvider.subnetId is a required parameter"
	Spec   ACLAssociationSpec   `json:"spec"`
	Status ACLAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ACLAssociationList contains a list of ACLAssociations
type ACLAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ACLAssociation `json:"items"`
}

// Repository type metadata.
var (
	ACLAssociation_Kind             = "ACLAssociation"
	ACLAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ACLAssociation_Kind}.String()
	ACLAssociation_KindAPIVersion   = ACLAssociation_Kind + "." + CRDGroupVersion.String()
	ACLAssociation_GroupVersionKind = CRDGroupVersion.WithKind(ACLAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&ACLAssociation{}, &ACLAssociationList{})
}
