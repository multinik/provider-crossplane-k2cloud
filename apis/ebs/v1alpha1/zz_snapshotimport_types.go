// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientDataInitParameters struct {
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	UploadEnd *string `json:"uploadEnd,omitempty" tf:"upload_end,omitempty"`

	UploadSize *float64 `json:"uploadSize,omitempty" tf:"upload_size,omitempty"`

	UploadStart *string `json:"uploadStart,omitempty" tf:"upload_start,omitempty"`
}

type ClientDataObservation struct {
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	UploadEnd *string `json:"uploadEnd,omitempty" tf:"upload_end,omitempty"`

	UploadSize *float64 `json:"uploadSize,omitempty" tf:"upload_size,omitempty"`

	UploadStart *string `json:"uploadStart,omitempty" tf:"upload_start,omitempty"`
}

type ClientDataParameters struct {

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Optional
	UploadEnd *string `json:"uploadEnd,omitempty" tf:"upload_end,omitempty"`

	// +kubebuilder:validation:Optional
	UploadSize *float64 `json:"uploadSize,omitempty" tf:"upload_size,omitempty"`

	// +kubebuilder:validation:Optional
	UploadStart *string `json:"uploadStart,omitempty" tf:"upload_start,omitempty"`
}

type DiskContainerInitParameters struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	UserBucket []UserBucketInitParameters `json:"userBucket,omitempty" tf:"user_bucket,omitempty"`
}

type DiskContainerObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	UserBucket []UserBucketObservation `json:"userBucket,omitempty" tf:"user_bucket,omitempty"`
}

type DiskContainerParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// +kubebuilder:validation:Optional
	UserBucket []UserBucketParameters `json:"userBucket,omitempty" tf:"user_bucket,omitempty"`
}

type SnapshotImportInitParameters struct {
	ClientData []ClientDataInitParameters `json:"clientData,omitempty" tf:"client_data,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	DiskContainer []DiskContainerInitParameters `json:"diskContainer,omitempty" tf:"disk_container,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	PermanentRestore *bool `json:"permanentRestore,omitempty" tf:"permanent_restore,omitempty"`

	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	StorageTier *string `json:"storageTier,omitempty" tf:"storage_tier,omitempty"`

	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	TemporaryRestoreDays *float64 `json:"temporaryRestoreDays,omitempty" tf:"temporary_restore_days,omitempty"`
}

type SnapshotImportObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ClientData []ClientDataObservation `json:"clientData,omitempty" tf:"client_data,omitempty"`

	DataEncryptionKeyID *string `json:"dataEncryptionKeyId,omitempty" tf:"data_encryption_key_id,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	DiskContainer []DiskContainerObservation `json:"diskContainer,omitempty" tf:"disk_container,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	OutpostArn *string `json:"outpostArn,omitempty" tf:"outpost_arn,omitempty"`

	OwnerAlias *string `json:"ownerAlias,omitempty" tf:"owner_alias,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	PermanentRestore *bool `json:"permanentRestore,omitempty" tf:"permanent_restore,omitempty"`

	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	StorageTier *string `json:"storageTier,omitempty" tf:"storage_tier,omitempty"`

	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	TemporaryRestoreDays *float64 `json:"temporaryRestoreDays,omitempty" tf:"temporary_restore_days,omitempty"`

	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`
}

type SnapshotImportParameters struct {

	// +kubebuilder:validation:Optional
	ClientData []ClientDataParameters `json:"clientData,omitempty" tf:"client_data,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DiskContainer []DiskContainerParameters `json:"diskContainer,omitempty" tf:"disk_container,omitempty"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	PermanentRestore *bool `json:"permanentRestore,omitempty" tf:"permanent_restore,omitempty"`

	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// +kubebuilder:validation:Optional
	StorageTier *string `json:"storageTier,omitempty" tf:"storage_tier,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// +kubebuilder:validation:Optional
	TemporaryRestoreDays *float64 `json:"temporaryRestoreDays,omitempty" tf:"temporary_restore_days,omitempty"`
}

type UserBucketInitParameters struct {
	S3Bucket *string `json:"s3Bucket,omitempty" tf:"s3_bucket,omitempty"`

	S3Key *string `json:"s3Key,omitempty" tf:"s3_key,omitempty"`
}

type UserBucketObservation struct {
	S3Bucket *string `json:"s3Bucket,omitempty" tf:"s3_bucket,omitempty"`

	S3Key *string `json:"s3Key,omitempty" tf:"s3_key,omitempty"`
}

type UserBucketParameters struct {

	// +kubebuilder:validation:Optional
	S3Bucket *string `json:"s3Bucket" tf:"s3_bucket,omitempty"`

	// +kubebuilder:validation:Optional
	S3Key *string `json:"s3Key" tf:"s3_key,omitempty"`
}

// SnapshotImportSpec defines the desired state of SnapshotImport
type SnapshotImportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotImportParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SnapshotImportInitParameters `json:"initProvider,omitempty"`
}

// SnapshotImportStatus defines the observed state of SnapshotImport.
type SnapshotImportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotImportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SnapshotImport is the Schema for the SnapshotImports API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,crossplane-k2cloud}
type SnapshotImport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.diskContainer) || (has(self.initProvider) && has(self.initProvider.diskContainer))",message="spec.forProvider.diskContainer is a required parameter"
	Spec   SnapshotImportSpec   `json:"spec"`
	Status SnapshotImportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotImportList contains a list of SnapshotImports
type SnapshotImportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotImport `json:"items"`
}

// Repository type metadata.
var (
	SnapshotImport_Kind             = "SnapshotImport"
	SnapshotImport_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotImport_Kind}.String()
	SnapshotImport_KindAPIVersion   = SnapshotImport_Kind + "." + CRDGroupVersion.String()
	SnapshotImport_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotImport_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotImport{}, &SnapshotImportList{})
}
